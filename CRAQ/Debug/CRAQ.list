
CRAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a74  08003a74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003a88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000108  08003a88  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb62  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f79  00000000  00000000  0002eb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00030b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000315c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001581b  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e772  00000000  00000000  000477b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869e5  00000000  00000000  00055f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc90a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000265c  00000000  00000000  000dc960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800399c 	.word	0x0800399c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800399c 	.word	0x0800399c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	1c08      	adds	r0, r1, #0
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f81e 	bl	800028c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_f2uiz>:
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	b510      	push	{r4, lr}
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	1c04      	adds	r4, r0, #0
 8000264:	f000 fc10 	bl	8000a88 <__aeabi_fcmpge>
 8000268:	2800      	cmp	r0, #0
 800026a:	d103      	bne.n	8000274 <__aeabi_f2uiz+0x18>
 800026c:	1c20      	adds	r0, r4, #0
 800026e:	f000 fbbb 	bl	80009e8 <__aeabi_f2iz>
 8000272:	bd10      	pop	{r4, pc}
 8000274:	219e      	movs	r1, #158	; 0x9e
 8000276:	1c20      	adds	r0, r4, #0
 8000278:	05c9      	lsls	r1, r1, #23
 800027a:	f000 f9ed 	bl	8000658 <__aeabi_fsub>
 800027e:	f000 fbb3 	bl	80009e8 <__aeabi_f2iz>
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	061b      	lsls	r3, r3, #24
 8000286:	469c      	mov	ip, r3
 8000288:	4460      	add	r0, ip
 800028a:	e7f2      	b.n	8000272 <__aeabi_f2uiz+0x16>

0800028c <__udivmoddi4>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	4657      	mov	r7, sl
 8000290:	464e      	mov	r6, r9
 8000292:	4645      	mov	r5, r8
 8000294:	46de      	mov	lr, fp
 8000296:	b5e0      	push	{r5, r6, r7, lr}
 8000298:	0004      	movs	r4, r0
 800029a:	000d      	movs	r5, r1
 800029c:	4692      	mov	sl, r2
 800029e:	4699      	mov	r9, r3
 80002a0:	b083      	sub	sp, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d830      	bhi.n	8000308 <__udivmoddi4+0x7c>
 80002a6:	d02d      	beq.n	8000304 <__udivmoddi4+0x78>
 80002a8:	4649      	mov	r1, r9
 80002aa:	4650      	mov	r0, sl
 80002ac:	f000 fc14 	bl	8000ad8 <__clzdi2>
 80002b0:	0029      	movs	r1, r5
 80002b2:	0006      	movs	r6, r0
 80002b4:	0020      	movs	r0, r4
 80002b6:	f000 fc0f 	bl	8000ad8 <__clzdi2>
 80002ba:	1a33      	subs	r3, r6, r0
 80002bc:	4698      	mov	r8, r3
 80002be:	3b20      	subs	r3, #32
 80002c0:	469b      	mov	fp, r3
 80002c2:	d433      	bmi.n	800032c <__udivmoddi4+0xa0>
 80002c4:	465a      	mov	r2, fp
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	4642      	mov	r2, r8
 80002cc:	001f      	movs	r7, r3
 80002ce:	4653      	mov	r3, sl
 80002d0:	4093      	lsls	r3, r2
 80002d2:	001e      	movs	r6, r3
 80002d4:	42af      	cmp	r7, r5
 80002d6:	d83a      	bhi.n	800034e <__udivmoddi4+0xc2>
 80002d8:	42af      	cmp	r7, r5
 80002da:	d100      	bne.n	80002de <__udivmoddi4+0x52>
 80002dc:	e078      	b.n	80003d0 <__udivmoddi4+0x144>
 80002de:	465b      	mov	r3, fp
 80002e0:	1ba4      	subs	r4, r4, r6
 80002e2:	41bd      	sbcs	r5, r7
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	da00      	bge.n	80002ea <__udivmoddi4+0x5e>
 80002e8:	e075      	b.n	80003d6 <__udivmoddi4+0x14a>
 80002ea:	2200      	movs	r2, #0
 80002ec:	2300      	movs	r3, #0
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	465a      	mov	r2, fp
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	2301      	movs	r3, #1
 80002fc:	4642      	mov	r2, r8
 80002fe:	4093      	lsls	r3, r2
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	e028      	b.n	8000356 <__udivmoddi4+0xca>
 8000304:	4282      	cmp	r2, r0
 8000306:	d9cf      	bls.n	80002a8 <__udivmoddi4+0x1c>
 8000308:	2200      	movs	r2, #0
 800030a:	2300      	movs	r3, #0
 800030c:	9200      	str	r2, [sp, #0]
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <__udivmoddi4+0x8e>
 8000316:	601c      	str	r4, [r3, #0]
 8000318:	605d      	str	r5, [r3, #4]
 800031a:	9800      	ldr	r0, [sp, #0]
 800031c:	9901      	ldr	r1, [sp, #4]
 800031e:	b003      	add	sp, #12
 8000320:	bcf0      	pop	{r4, r5, r6, r7}
 8000322:	46bb      	mov	fp, r7
 8000324:	46b2      	mov	sl, r6
 8000326:	46a9      	mov	r9, r5
 8000328:	46a0      	mov	r8, r4
 800032a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032c:	4642      	mov	r2, r8
 800032e:	2320      	movs	r3, #32
 8000330:	1a9b      	subs	r3, r3, r2
 8000332:	4652      	mov	r2, sl
 8000334:	40da      	lsrs	r2, r3
 8000336:	4641      	mov	r1, r8
 8000338:	0013      	movs	r3, r2
 800033a:	464a      	mov	r2, r9
 800033c:	408a      	lsls	r2, r1
 800033e:	0017      	movs	r7, r2
 8000340:	4642      	mov	r2, r8
 8000342:	431f      	orrs	r7, r3
 8000344:	4653      	mov	r3, sl
 8000346:	4093      	lsls	r3, r2
 8000348:	001e      	movs	r6, r3
 800034a:	42af      	cmp	r7, r5
 800034c:	d9c4      	bls.n	80002d8 <__udivmoddi4+0x4c>
 800034e:	2200      	movs	r2, #0
 8000350:	2300      	movs	r3, #0
 8000352:	9200      	str	r2, [sp, #0]
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	4643      	mov	r3, r8
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0d9      	beq.n	8000310 <__udivmoddi4+0x84>
 800035c:	07fb      	lsls	r3, r7, #31
 800035e:	0872      	lsrs	r2, r6, #1
 8000360:	431a      	orrs	r2, r3
 8000362:	4646      	mov	r6, r8
 8000364:	087b      	lsrs	r3, r7, #1
 8000366:	e00e      	b.n	8000386 <__udivmoddi4+0xfa>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d101      	bne.n	8000370 <__udivmoddi4+0xe4>
 800036c:	42a2      	cmp	r2, r4
 800036e:	d80c      	bhi.n	800038a <__udivmoddi4+0xfe>
 8000370:	1aa4      	subs	r4, r4, r2
 8000372:	419d      	sbcs	r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2100      	movs	r1, #0
 800037c:	3e01      	subs	r6, #1
 800037e:	1824      	adds	r4, r4, r0
 8000380:	414d      	adcs	r5, r1
 8000382:	2e00      	cmp	r6, #0
 8000384:	d006      	beq.n	8000394 <__udivmoddi4+0x108>
 8000386:	42ab      	cmp	r3, r5
 8000388:	d9ee      	bls.n	8000368 <__udivmoddi4+0xdc>
 800038a:	3e01      	subs	r6, #1
 800038c:	1924      	adds	r4, r4, r4
 800038e:	416d      	adcs	r5, r5
 8000390:	2e00      	cmp	r6, #0
 8000392:	d1f8      	bne.n	8000386 <__udivmoddi4+0xfa>
 8000394:	9800      	ldr	r0, [sp, #0]
 8000396:	9901      	ldr	r1, [sp, #4]
 8000398:	465b      	mov	r3, fp
 800039a:	1900      	adds	r0, r0, r4
 800039c:	4169      	adcs	r1, r5
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db24      	blt.n	80003ec <__udivmoddi4+0x160>
 80003a2:	002b      	movs	r3, r5
 80003a4:	465a      	mov	r2, fp
 80003a6:	4644      	mov	r4, r8
 80003a8:	40d3      	lsrs	r3, r2
 80003aa:	002a      	movs	r2, r5
 80003ac:	40e2      	lsrs	r2, r4
 80003ae:	001c      	movs	r4, r3
 80003b0:	465b      	mov	r3, fp
 80003b2:	0015      	movs	r5, r2
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db2a      	blt.n	800040e <__udivmoddi4+0x182>
 80003b8:	0026      	movs	r6, r4
 80003ba:	409e      	lsls	r6, r3
 80003bc:	0033      	movs	r3, r6
 80003be:	0026      	movs	r6, r4
 80003c0:	4647      	mov	r7, r8
 80003c2:	40be      	lsls	r6, r7
 80003c4:	0032      	movs	r2, r6
 80003c6:	1a80      	subs	r0, r0, r2
 80003c8:	4199      	sbcs	r1, r3
 80003ca:	9000      	str	r0, [sp, #0]
 80003cc:	9101      	str	r1, [sp, #4]
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x84>
 80003d0:	42a3      	cmp	r3, r4
 80003d2:	d8bc      	bhi.n	800034e <__udivmoddi4+0xc2>
 80003d4:	e783      	b.n	80002de <__udivmoddi4+0x52>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	2100      	movs	r1, #0
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	2200      	movs	r2, #0
 80003e0:	9100      	str	r1, [sp, #0]
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	2201      	movs	r2, #1
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	9201      	str	r2, [sp, #4]
 80003ea:	e786      	b.n	80002fa <__udivmoddi4+0x6e>
 80003ec:	4642      	mov	r2, r8
 80003ee:	2320      	movs	r3, #32
 80003f0:	1a9b      	subs	r3, r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	4646      	mov	r6, r8
 80003f6:	409a      	lsls	r2, r3
 80003f8:	0023      	movs	r3, r4
 80003fa:	40f3      	lsrs	r3, r6
 80003fc:	4644      	mov	r4, r8
 80003fe:	4313      	orrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	dad4      	bge.n	80003b8 <__udivmoddi4+0x12c>
 800040e:	4642      	mov	r2, r8
 8000410:	002f      	movs	r7, r5
 8000412:	2320      	movs	r3, #32
 8000414:	0026      	movs	r6, r4
 8000416:	4097      	lsls	r7, r2
 8000418:	1a9b      	subs	r3, r3, r2
 800041a:	40de      	lsrs	r6, r3
 800041c:	003b      	movs	r3, r7
 800041e:	4333      	orrs	r3, r6
 8000420:	e7cd      	b.n	80003be <__udivmoddi4+0x132>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fmul>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	4657      	mov	r7, sl
 8000428:	464e      	mov	r6, r9
 800042a:	4645      	mov	r5, r8
 800042c:	46de      	mov	lr, fp
 800042e:	0244      	lsls	r4, r0, #9
 8000430:	b5e0      	push	{r5, r6, r7, lr}
 8000432:	0045      	lsls	r5, r0, #1
 8000434:	1c0f      	adds	r7, r1, #0
 8000436:	0a64      	lsrs	r4, r4, #9
 8000438:	0e2d      	lsrs	r5, r5, #24
 800043a:	0fc6      	lsrs	r6, r0, #31
 800043c:	2d00      	cmp	r5, #0
 800043e:	d047      	beq.n	80004d0 <__aeabi_fmul+0xac>
 8000440:	2dff      	cmp	r5, #255	; 0xff
 8000442:	d04d      	beq.n	80004e0 <__aeabi_fmul+0xbc>
 8000444:	2300      	movs	r3, #0
 8000446:	2080      	movs	r0, #128	; 0x80
 8000448:	469a      	mov	sl, r3
 800044a:	469b      	mov	fp, r3
 800044c:	00e4      	lsls	r4, r4, #3
 800044e:	04c0      	lsls	r0, r0, #19
 8000450:	4304      	orrs	r4, r0
 8000452:	3d7f      	subs	r5, #127	; 0x7f
 8000454:	0278      	lsls	r0, r7, #9
 8000456:	0a43      	lsrs	r3, r0, #9
 8000458:	4699      	mov	r9, r3
 800045a:	007a      	lsls	r2, r7, #1
 800045c:	0ffb      	lsrs	r3, r7, #31
 800045e:	4698      	mov	r8, r3
 8000460:	0e12      	lsrs	r2, r2, #24
 8000462:	464b      	mov	r3, r9
 8000464:	d044      	beq.n	80004f0 <__aeabi_fmul+0xcc>
 8000466:	2aff      	cmp	r2, #255	; 0xff
 8000468:	d011      	beq.n	800048e <__aeabi_fmul+0x6a>
 800046a:	00d8      	lsls	r0, r3, #3
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	04db      	lsls	r3, r3, #19
 8000470:	4303      	orrs	r3, r0
 8000472:	4699      	mov	r9, r3
 8000474:	2000      	movs	r0, #0
 8000476:	3a7f      	subs	r2, #127	; 0x7f
 8000478:	18ad      	adds	r5, r5, r2
 800047a:	4647      	mov	r7, r8
 800047c:	4653      	mov	r3, sl
 800047e:	4077      	eors	r7, r6
 8000480:	1c69      	adds	r1, r5, #1
 8000482:	2b0f      	cmp	r3, #15
 8000484:	d83f      	bhi.n	8000506 <__aeabi_fmul+0xe2>
 8000486:	4a72      	ldr	r2, [pc, #456]	; (8000650 <__aeabi_fmul+0x22c>)
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	58d3      	ldr	r3, [r2, r3]
 800048c:	469f      	mov	pc, r3
 800048e:	35ff      	adds	r5, #255	; 0xff
 8000490:	2b00      	cmp	r3, #0
 8000492:	d000      	beq.n	8000496 <__aeabi_fmul+0x72>
 8000494:	e079      	b.n	800058a <__aeabi_fmul+0x166>
 8000496:	4652      	mov	r2, sl
 8000498:	2302      	movs	r3, #2
 800049a:	431a      	orrs	r2, r3
 800049c:	4692      	mov	sl, r2
 800049e:	2002      	movs	r0, #2
 80004a0:	e7eb      	b.n	800047a <__aeabi_fmul+0x56>
 80004a2:	4647      	mov	r7, r8
 80004a4:	464c      	mov	r4, r9
 80004a6:	4683      	mov	fp, r0
 80004a8:	465b      	mov	r3, fp
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d028      	beq.n	8000500 <__aeabi_fmul+0xdc>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fmul+0x90>
 80004b2:	e0c6      	b.n	8000642 <__aeabi_fmul+0x21e>
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d14f      	bne.n	8000558 <__aeabi_fmul+0x134>
 80004b8:	2000      	movs	r0, #0
 80004ba:	2400      	movs	r4, #0
 80004bc:	05c0      	lsls	r0, r0, #23
 80004be:	07ff      	lsls	r7, r7, #31
 80004c0:	4320      	orrs	r0, r4
 80004c2:	4338      	orrs	r0, r7
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d171      	bne.n	80005b8 <__aeabi_fmul+0x194>
 80004d4:	2304      	movs	r3, #4
 80004d6:	469a      	mov	sl, r3
 80004d8:	3b03      	subs	r3, #3
 80004da:	2500      	movs	r5, #0
 80004dc:	469b      	mov	fp, r3
 80004de:	e7b9      	b.n	8000454 <__aeabi_fmul+0x30>
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d163      	bne.n	80005ac <__aeabi_fmul+0x188>
 80004e4:	2308      	movs	r3, #8
 80004e6:	469a      	mov	sl, r3
 80004e8:	3b06      	subs	r3, #6
 80004ea:	25ff      	movs	r5, #255	; 0xff
 80004ec:	469b      	mov	fp, r3
 80004ee:	e7b1      	b.n	8000454 <__aeabi_fmul+0x30>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d150      	bne.n	8000596 <__aeabi_fmul+0x172>
 80004f4:	4652      	mov	r2, sl
 80004f6:	3301      	adds	r3, #1
 80004f8:	431a      	orrs	r2, r3
 80004fa:	4692      	mov	sl, r2
 80004fc:	2001      	movs	r0, #1
 80004fe:	e7bc      	b.n	800047a <__aeabi_fmul+0x56>
 8000500:	20ff      	movs	r0, #255	; 0xff
 8000502:	2400      	movs	r4, #0
 8000504:	e7da      	b.n	80004bc <__aeabi_fmul+0x98>
 8000506:	4648      	mov	r0, r9
 8000508:	0c26      	lsrs	r6, r4, #16
 800050a:	0424      	lsls	r4, r4, #16
 800050c:	0c22      	lsrs	r2, r4, #16
 800050e:	0404      	lsls	r4, r0, #16
 8000510:	0c24      	lsrs	r4, r4, #16
 8000512:	464b      	mov	r3, r9
 8000514:	0020      	movs	r0, r4
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	4350      	muls	r0, r2
 800051a:	4374      	muls	r4, r6
 800051c:	435a      	muls	r2, r3
 800051e:	435e      	muls	r6, r3
 8000520:	1912      	adds	r2, r2, r4
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	189b      	adds	r3, r3, r2
 8000526:	429c      	cmp	r4, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_fmul+0x10e>
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	0252      	lsls	r2, r2, #9
 800052e:	4694      	mov	ip, r2
 8000530:	4466      	add	r6, ip
 8000532:	0400      	lsls	r0, r0, #16
 8000534:	041a      	lsls	r2, r3, #16
 8000536:	0c00      	lsrs	r0, r0, #16
 8000538:	1812      	adds	r2, r2, r0
 800053a:	0194      	lsls	r4, r2, #6
 800053c:	1e60      	subs	r0, r4, #1
 800053e:	4184      	sbcs	r4, r0
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	0e92      	lsrs	r2, r2, #26
 8000544:	199b      	adds	r3, r3, r6
 8000546:	4314      	orrs	r4, r2
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	431c      	orrs	r4, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	d572      	bpl.n	8000636 <__aeabi_fmul+0x212>
 8000550:	2001      	movs	r0, #1
 8000552:	0863      	lsrs	r3, r4, #1
 8000554:	4004      	ands	r4, r0
 8000556:	431c      	orrs	r4, r3
 8000558:	0008      	movs	r0, r1
 800055a:	307f      	adds	r0, #127	; 0x7f
 800055c:	2800      	cmp	r0, #0
 800055e:	dd3c      	ble.n	80005da <__aeabi_fmul+0x1b6>
 8000560:	0763      	lsls	r3, r4, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fmul+0x14a>
 8000564:	230f      	movs	r3, #15
 8000566:	4023      	ands	r3, r4
 8000568:	2b04      	cmp	r3, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fmul+0x14a>
 800056c:	3404      	adds	r4, #4
 800056e:	0123      	lsls	r3, r4, #4
 8000570:	d503      	bpl.n	800057a <__aeabi_fmul+0x156>
 8000572:	3180      	adds	r1, #128	; 0x80
 8000574:	0008      	movs	r0, r1
 8000576:	4b37      	ldr	r3, [pc, #220]	; (8000654 <__aeabi_fmul+0x230>)
 8000578:	401c      	ands	r4, r3
 800057a:	28fe      	cmp	r0, #254	; 0xfe
 800057c:	dcc0      	bgt.n	8000500 <__aeabi_fmul+0xdc>
 800057e:	01a4      	lsls	r4, r4, #6
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	b2c0      	uxtb	r0, r0
 8000584:	e79a      	b.n	80004bc <__aeabi_fmul+0x98>
 8000586:	0037      	movs	r7, r6
 8000588:	e78e      	b.n	80004a8 <__aeabi_fmul+0x84>
 800058a:	4652      	mov	r2, sl
 800058c:	2303      	movs	r3, #3
 800058e:	431a      	orrs	r2, r3
 8000590:	4692      	mov	sl, r2
 8000592:	2003      	movs	r0, #3
 8000594:	e771      	b.n	800047a <__aeabi_fmul+0x56>
 8000596:	4648      	mov	r0, r9
 8000598:	f000 fa80 	bl	8000a9c <__clzsi2>
 800059c:	464a      	mov	r2, r9
 800059e:	1f43      	subs	r3, r0, #5
 80005a0:	409a      	lsls	r2, r3
 80005a2:	1a2d      	subs	r5, r5, r0
 80005a4:	4691      	mov	r9, r2
 80005a6:	2000      	movs	r0, #0
 80005a8:	3d76      	subs	r5, #118	; 0x76
 80005aa:	e766      	b.n	800047a <__aeabi_fmul+0x56>
 80005ac:	230c      	movs	r3, #12
 80005ae:	469a      	mov	sl, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	25ff      	movs	r5, #255	; 0xff
 80005b4:	469b      	mov	fp, r3
 80005b6:	e74d      	b.n	8000454 <__aeabi_fmul+0x30>
 80005b8:	0020      	movs	r0, r4
 80005ba:	f000 fa6f 	bl	8000a9c <__clzsi2>
 80005be:	2576      	movs	r5, #118	; 0x76
 80005c0:	1f43      	subs	r3, r0, #5
 80005c2:	409c      	lsls	r4, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	426d      	negs	r5, r5
 80005c8:	469a      	mov	sl, r3
 80005ca:	469b      	mov	fp, r3
 80005cc:	1a2d      	subs	r5, r5, r0
 80005ce:	e741      	b.n	8000454 <__aeabi_fmul+0x30>
 80005d0:	2480      	movs	r4, #128	; 0x80
 80005d2:	2700      	movs	r7, #0
 80005d4:	20ff      	movs	r0, #255	; 0xff
 80005d6:	03e4      	lsls	r4, r4, #15
 80005d8:	e770      	b.n	80004bc <__aeabi_fmul+0x98>
 80005da:	2301      	movs	r3, #1
 80005dc:	1a1b      	subs	r3, r3, r0
 80005de:	2b1b      	cmp	r3, #27
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_fmul+0x1c0>
 80005e2:	e769      	b.n	80004b8 <__aeabi_fmul+0x94>
 80005e4:	319e      	adds	r1, #158	; 0x9e
 80005e6:	0020      	movs	r0, r4
 80005e8:	408c      	lsls	r4, r1
 80005ea:	40d8      	lsrs	r0, r3
 80005ec:	1e63      	subs	r3, r4, #1
 80005ee:	419c      	sbcs	r4, r3
 80005f0:	4304      	orrs	r4, r0
 80005f2:	0763      	lsls	r3, r4, #29
 80005f4:	d004      	beq.n	8000600 <__aeabi_fmul+0x1dc>
 80005f6:	230f      	movs	r3, #15
 80005f8:	4023      	ands	r3, r4
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d000      	beq.n	8000600 <__aeabi_fmul+0x1dc>
 80005fe:	3404      	adds	r4, #4
 8000600:	0163      	lsls	r3, r4, #5
 8000602:	d51a      	bpl.n	800063a <__aeabi_fmul+0x216>
 8000604:	2001      	movs	r0, #1
 8000606:	2400      	movs	r4, #0
 8000608:	e758      	b.n	80004bc <__aeabi_fmul+0x98>
 800060a:	2080      	movs	r0, #128	; 0x80
 800060c:	03c0      	lsls	r0, r0, #15
 800060e:	4204      	tst	r4, r0
 8000610:	d009      	beq.n	8000626 <__aeabi_fmul+0x202>
 8000612:	464b      	mov	r3, r9
 8000614:	4203      	tst	r3, r0
 8000616:	d106      	bne.n	8000626 <__aeabi_fmul+0x202>
 8000618:	464c      	mov	r4, r9
 800061a:	4304      	orrs	r4, r0
 800061c:	0264      	lsls	r4, r4, #9
 800061e:	4647      	mov	r7, r8
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	0a64      	lsrs	r4, r4, #9
 8000624:	e74a      	b.n	80004bc <__aeabi_fmul+0x98>
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	03c0      	lsls	r0, r0, #15
 800062a:	4304      	orrs	r4, r0
 800062c:	0264      	lsls	r4, r4, #9
 800062e:	0037      	movs	r7, r6
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e742      	b.n	80004bc <__aeabi_fmul+0x98>
 8000636:	0029      	movs	r1, r5
 8000638:	e78e      	b.n	8000558 <__aeabi_fmul+0x134>
 800063a:	01a4      	lsls	r4, r4, #6
 800063c:	2000      	movs	r0, #0
 800063e:	0a64      	lsrs	r4, r4, #9
 8000640:	e73c      	b.n	80004bc <__aeabi_fmul+0x98>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4304      	orrs	r4, r0
 8000648:	0264      	lsls	r4, r4, #9
 800064a:	20ff      	movs	r0, #255	; 0xff
 800064c:	0a64      	lsrs	r4, r4, #9
 800064e:	e735      	b.n	80004bc <__aeabi_fmul+0x98>
 8000650:	080039b4 	.word	0x080039b4
 8000654:	f7ffffff 	.word	0xf7ffffff

08000658 <__aeabi_fsub>:
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	4646      	mov	r6, r8
 800065c:	46d6      	mov	lr, sl
 800065e:	464f      	mov	r7, r9
 8000660:	0243      	lsls	r3, r0, #9
 8000662:	0a5b      	lsrs	r3, r3, #9
 8000664:	00da      	lsls	r2, r3, #3
 8000666:	4694      	mov	ip, r2
 8000668:	024a      	lsls	r2, r1, #9
 800066a:	b5c0      	push	{r6, r7, lr}
 800066c:	0044      	lsls	r4, r0, #1
 800066e:	0a56      	lsrs	r6, r2, #9
 8000670:	1c05      	adds	r5, r0, #0
 8000672:	46b0      	mov	r8, r6
 8000674:	0e24      	lsrs	r4, r4, #24
 8000676:	004e      	lsls	r6, r1, #1
 8000678:	0992      	lsrs	r2, r2, #6
 800067a:	001f      	movs	r7, r3
 800067c:	0020      	movs	r0, r4
 800067e:	4692      	mov	sl, r2
 8000680:	0fed      	lsrs	r5, r5, #31
 8000682:	0e36      	lsrs	r6, r6, #24
 8000684:	0fc9      	lsrs	r1, r1, #31
 8000686:	2eff      	cmp	r6, #255	; 0xff
 8000688:	d100      	bne.n	800068c <__aeabi_fsub+0x34>
 800068a:	e07f      	b.n	800078c <__aeabi_fsub+0x134>
 800068c:	2201      	movs	r2, #1
 800068e:	4051      	eors	r1, r2
 8000690:	428d      	cmp	r5, r1
 8000692:	d051      	beq.n	8000738 <__aeabi_fsub+0xe0>
 8000694:	1ba2      	subs	r2, r4, r6
 8000696:	4691      	mov	r9, r2
 8000698:	2a00      	cmp	r2, #0
 800069a:	dc00      	bgt.n	800069e <__aeabi_fsub+0x46>
 800069c:	e07e      	b.n	800079c <__aeabi_fsub+0x144>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fsub+0x4c>
 80006a2:	e099      	b.n	80007d8 <__aeabi_fsub+0x180>
 80006a4:	2cff      	cmp	r4, #255	; 0xff
 80006a6:	d100      	bne.n	80006aa <__aeabi_fsub+0x52>
 80006a8:	e08c      	b.n	80007c4 <__aeabi_fsub+0x16c>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	4652      	mov	r2, sl
 80006ae:	04db      	lsls	r3, r3, #19
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4692      	mov	sl, r2
 80006b4:	464a      	mov	r2, r9
 80006b6:	2301      	movs	r3, #1
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dc08      	bgt.n	80006ce <__aeabi_fsub+0x76>
 80006bc:	4653      	mov	r3, sl
 80006be:	2120      	movs	r1, #32
 80006c0:	40d3      	lsrs	r3, r2
 80006c2:	1a89      	subs	r1, r1, r2
 80006c4:	4652      	mov	r2, sl
 80006c6:	408a      	lsls	r2, r1
 80006c8:	1e51      	subs	r1, r2, #1
 80006ca:	418a      	sbcs	r2, r1
 80006cc:	4313      	orrs	r3, r2
 80006ce:	4662      	mov	r2, ip
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	015a      	lsls	r2, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0x80>
 80006d6:	e0f3      	b.n	80008c0 <__aeabi_fsub+0x268>
 80006d8:	019b      	lsls	r3, r3, #6
 80006da:	099e      	lsrs	r6, r3, #6
 80006dc:	0030      	movs	r0, r6
 80006de:	f000 f9dd 	bl	8000a9c <__clzsi2>
 80006e2:	3805      	subs	r0, #5
 80006e4:	4086      	lsls	r6, r0
 80006e6:	4284      	cmp	r4, r0
 80006e8:	dd00      	ble.n	80006ec <__aeabi_fsub+0x94>
 80006ea:	e0f7      	b.n	80008dc <__aeabi_fsub+0x284>
 80006ec:	0032      	movs	r2, r6
 80006ee:	1b04      	subs	r4, r0, r4
 80006f0:	2020      	movs	r0, #32
 80006f2:	3401      	adds	r4, #1
 80006f4:	40e2      	lsrs	r2, r4
 80006f6:	1b04      	subs	r4, r0, r4
 80006f8:	40a6      	lsls	r6, r4
 80006fa:	0033      	movs	r3, r6
 80006fc:	1e5e      	subs	r6, r3, #1
 80006fe:	41b3      	sbcs	r3, r6
 8000700:	2400      	movs	r4, #0
 8000702:	4313      	orrs	r3, r2
 8000704:	075a      	lsls	r2, r3, #29
 8000706:	d004      	beq.n	8000712 <__aeabi_fsub+0xba>
 8000708:	220f      	movs	r2, #15
 800070a:	401a      	ands	r2, r3
 800070c:	2a04      	cmp	r2, #4
 800070e:	d000      	beq.n	8000712 <__aeabi_fsub+0xba>
 8000710:	3304      	adds	r3, #4
 8000712:	015a      	lsls	r2, r3, #5
 8000714:	d400      	bmi.n	8000718 <__aeabi_fsub+0xc0>
 8000716:	e0d6      	b.n	80008c6 <__aeabi_fsub+0x26e>
 8000718:	1c62      	adds	r2, r4, #1
 800071a:	2cfe      	cmp	r4, #254	; 0xfe
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0xc8>
 800071e:	e0da      	b.n	80008d6 <__aeabi_fsub+0x27e>
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	0a5f      	lsrs	r7, r3, #9
 8000724:	b2d0      	uxtb	r0, r2
 8000726:	05c0      	lsls	r0, r0, #23
 8000728:	4338      	orrs	r0, r7
 800072a:	07ed      	lsls	r5, r5, #31
 800072c:	4328      	orrs	r0, r5
 800072e:	bce0      	pop	{r5, r6, r7}
 8000730:	46ba      	mov	sl, r7
 8000732:	46b1      	mov	r9, r6
 8000734:	46a8      	mov	r8, r5
 8000736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000738:	1ba2      	subs	r2, r4, r6
 800073a:	4691      	mov	r9, r2
 800073c:	2a00      	cmp	r2, #0
 800073e:	dd63      	ble.n	8000808 <__aeabi_fsub+0x1b0>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0xee>
 8000744:	e099      	b.n	800087a <__aeabi_fsub+0x222>
 8000746:	2cff      	cmp	r4, #255	; 0xff
 8000748:	d03c      	beq.n	80007c4 <__aeabi_fsub+0x16c>
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	4652      	mov	r2, sl
 800074e:	04db      	lsls	r3, r3, #19
 8000750:	431a      	orrs	r2, r3
 8000752:	4692      	mov	sl, r2
 8000754:	464a      	mov	r2, r9
 8000756:	2301      	movs	r3, #1
 8000758:	2a1b      	cmp	r2, #27
 800075a:	dc08      	bgt.n	800076e <__aeabi_fsub+0x116>
 800075c:	4653      	mov	r3, sl
 800075e:	2120      	movs	r1, #32
 8000760:	40d3      	lsrs	r3, r2
 8000762:	1a89      	subs	r1, r1, r2
 8000764:	4652      	mov	r2, sl
 8000766:	408a      	lsls	r2, r1
 8000768:	1e51      	subs	r1, r2, #1
 800076a:	418a      	sbcs	r2, r1
 800076c:	4313      	orrs	r3, r2
 800076e:	4463      	add	r3, ip
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d400      	bmi.n	8000776 <__aeabi_fsub+0x11e>
 8000774:	e0a4      	b.n	80008c0 <__aeabi_fsub+0x268>
 8000776:	3401      	adds	r4, #1
 8000778:	2cff      	cmp	r4, #255	; 0xff
 800077a:	d100      	bne.n	800077e <__aeabi_fsub+0x126>
 800077c:	e0ab      	b.n	80008d6 <__aeabi_fsub+0x27e>
 800077e:	2201      	movs	r2, #1
 8000780:	4997      	ldr	r1, [pc, #604]	; (80009e0 <__aeabi_fsub+0x388>)
 8000782:	401a      	ands	r2, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	400b      	ands	r3, r1
 8000788:	4313      	orrs	r3, r2
 800078a:	e7bb      	b.n	8000704 <__aeabi_fsub+0xac>
 800078c:	2a00      	cmp	r2, #0
 800078e:	d032      	beq.n	80007f6 <__aeabi_fsub+0x19e>
 8000790:	428d      	cmp	r5, r1
 8000792:	d035      	beq.n	8000800 <__aeabi_fsub+0x1a8>
 8000794:	22ff      	movs	r2, #255	; 0xff
 8000796:	4252      	negs	r2, r2
 8000798:	4691      	mov	r9, r2
 800079a:	44a1      	add	r9, r4
 800079c:	464a      	mov	r2, r9
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d051      	beq.n	8000846 <__aeabi_fsub+0x1ee>
 80007a2:	1b30      	subs	r0, r6, r4
 80007a4:	2c00      	cmp	r4, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_fsub+0x152>
 80007a8:	e09c      	b.n	80008e4 <__aeabi_fsub+0x28c>
 80007aa:	4663      	mov	r3, ip
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fsub+0x15a>
 80007b0:	e0df      	b.n	8000972 <__aeabi_fsub+0x31a>
 80007b2:	3801      	subs	r0, #1
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0x162>
 80007b8:	e0f7      	b.n	80009aa <__aeabi_fsub+0x352>
 80007ba:	2eff      	cmp	r6, #255	; 0xff
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fsub+0x168>
 80007be:	e099      	b.n	80008f4 <__aeabi_fsub+0x29c>
 80007c0:	000d      	movs	r5, r1
 80007c2:	4643      	mov	r3, r8
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fsub+0x172>
 80007c8:	e085      	b.n	80008d6 <__aeabi_fsub+0x27e>
 80007ca:	2780      	movs	r7, #128	; 0x80
 80007cc:	03ff      	lsls	r7, r7, #15
 80007ce:	431f      	orrs	r7, r3
 80007d0:	027f      	lsls	r7, r7, #9
 80007d2:	20ff      	movs	r0, #255	; 0xff
 80007d4:	0a7f      	lsrs	r7, r7, #9
 80007d6:	e7a6      	b.n	8000726 <__aeabi_fsub+0xce>
 80007d8:	4652      	mov	r2, sl
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d074      	beq.n	80008c8 <__aeabi_fsub+0x270>
 80007de:	2201      	movs	r2, #1
 80007e0:	4252      	negs	r2, r2
 80007e2:	4690      	mov	r8, r2
 80007e4:	44c1      	add	r9, r8
 80007e6:	464a      	mov	r2, r9
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fsub+0x196>
 80007ec:	e0c8      	b.n	8000980 <__aeabi_fsub+0x328>
 80007ee:	2cff      	cmp	r4, #255	; 0xff
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fsub+0x19c>
 80007f2:	e75f      	b.n	80006b4 <__aeabi_fsub+0x5c>
 80007f4:	e7e6      	b.n	80007c4 <__aeabi_fsub+0x16c>
 80007f6:	2201      	movs	r2, #1
 80007f8:	4051      	eors	r1, r2
 80007fa:	42a9      	cmp	r1, r5
 80007fc:	d000      	beq.n	8000800 <__aeabi_fsub+0x1a8>
 80007fe:	e749      	b.n	8000694 <__aeabi_fsub+0x3c>
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	4252      	negs	r2, r2
 8000804:	4691      	mov	r9, r2
 8000806:	44a1      	add	r9, r4
 8000808:	464a      	mov	r2, r9
 800080a:	2a00      	cmp	r2, #0
 800080c:	d043      	beq.n	8000896 <__aeabi_fsub+0x23e>
 800080e:	1b31      	subs	r1, r6, r4
 8000810:	2c00      	cmp	r4, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_fsub+0x1be>
 8000814:	e08c      	b.n	8000930 <__aeabi_fsub+0x2d8>
 8000816:	2eff      	cmp	r6, #255	; 0xff
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0x1c4>
 800081a:	e092      	b.n	8000942 <__aeabi_fsub+0x2ea>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	4662      	mov	r2, ip
 8000820:	04db      	lsls	r3, r3, #19
 8000822:	431a      	orrs	r2, r3
 8000824:	4694      	mov	ip, r2
 8000826:	2301      	movs	r3, #1
 8000828:	291b      	cmp	r1, #27
 800082a:	dc09      	bgt.n	8000840 <__aeabi_fsub+0x1e8>
 800082c:	2020      	movs	r0, #32
 800082e:	4663      	mov	r3, ip
 8000830:	4662      	mov	r2, ip
 8000832:	40cb      	lsrs	r3, r1
 8000834:	1a41      	subs	r1, r0, r1
 8000836:	408a      	lsls	r2, r1
 8000838:	0011      	movs	r1, r2
 800083a:	1e48      	subs	r0, r1, #1
 800083c:	4181      	sbcs	r1, r0
 800083e:	430b      	orrs	r3, r1
 8000840:	0034      	movs	r4, r6
 8000842:	4453      	add	r3, sl
 8000844:	e794      	b.n	8000770 <__aeabi_fsub+0x118>
 8000846:	22fe      	movs	r2, #254	; 0xfe
 8000848:	1c66      	adds	r6, r4, #1
 800084a:	4232      	tst	r2, r6
 800084c:	d164      	bne.n	8000918 <__aeabi_fsub+0x2c0>
 800084e:	2c00      	cmp	r4, #0
 8000850:	d000      	beq.n	8000854 <__aeabi_fsub+0x1fc>
 8000852:	e082      	b.n	800095a <__aeabi_fsub+0x302>
 8000854:	4663      	mov	r3, ip
 8000856:	2b00      	cmp	r3, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x204>
 800085a:	e0ab      	b.n	80009b4 <__aeabi_fsub+0x35c>
 800085c:	4653      	mov	r3, sl
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x20c>
 8000862:	e760      	b.n	8000726 <__aeabi_fsub+0xce>
 8000864:	4663      	mov	r3, ip
 8000866:	4652      	mov	r2, sl
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	015a      	lsls	r2, r3, #5
 800086c:	d400      	bmi.n	8000870 <__aeabi_fsub+0x218>
 800086e:	e0aa      	b.n	80009c6 <__aeabi_fsub+0x36e>
 8000870:	4663      	mov	r3, ip
 8000872:	4652      	mov	r2, sl
 8000874:	000d      	movs	r5, r1
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	e744      	b.n	8000704 <__aeabi_fsub+0xac>
 800087a:	4652      	mov	r2, sl
 800087c:	2a00      	cmp	r2, #0
 800087e:	d023      	beq.n	80008c8 <__aeabi_fsub+0x270>
 8000880:	2201      	movs	r2, #1
 8000882:	4252      	negs	r2, r2
 8000884:	4690      	mov	r8, r2
 8000886:	44c1      	add	r9, r8
 8000888:	464a      	mov	r2, r9
 800088a:	2a00      	cmp	r2, #0
 800088c:	d075      	beq.n	800097a <__aeabi_fsub+0x322>
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d000      	beq.n	8000894 <__aeabi_fsub+0x23c>
 8000892:	e75f      	b.n	8000754 <__aeabi_fsub+0xfc>
 8000894:	e796      	b.n	80007c4 <__aeabi_fsub+0x16c>
 8000896:	26fe      	movs	r6, #254	; 0xfe
 8000898:	3401      	adds	r4, #1
 800089a:	4226      	tst	r6, r4
 800089c:	d153      	bne.n	8000946 <__aeabi_fsub+0x2ee>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d172      	bne.n	8000988 <__aeabi_fsub+0x330>
 80008a2:	4663      	mov	r3, ip
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_fsub+0x252>
 80008a8:	e093      	b.n	80009d2 <__aeabi_fsub+0x37a>
 80008aa:	4653      	mov	r3, sl
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x25a>
 80008b0:	e739      	b.n	8000726 <__aeabi_fsub+0xce>
 80008b2:	4463      	add	r3, ip
 80008b4:	2400      	movs	r4, #0
 80008b6:	015a      	lsls	r2, r3, #5
 80008b8:	d502      	bpl.n	80008c0 <__aeabi_fsub+0x268>
 80008ba:	4a4a      	ldr	r2, [pc, #296]	; (80009e4 <__aeabi_fsub+0x38c>)
 80008bc:	3401      	adds	r4, #1
 80008be:	4013      	ands	r3, r2
 80008c0:	075a      	lsls	r2, r3, #29
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fsub+0x26e>
 80008c4:	e720      	b.n	8000708 <__aeabi_fsub+0xb0>
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	2cff      	cmp	r4, #255	; 0xff
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x276>
 80008cc:	e77a      	b.n	80007c4 <__aeabi_fsub+0x16c>
 80008ce:	025b      	lsls	r3, r3, #9
 80008d0:	0a5f      	lsrs	r7, r3, #9
 80008d2:	b2e0      	uxtb	r0, r4
 80008d4:	e727      	b.n	8000726 <__aeabi_fsub+0xce>
 80008d6:	20ff      	movs	r0, #255	; 0xff
 80008d8:	2700      	movs	r7, #0
 80008da:	e724      	b.n	8000726 <__aeabi_fsub+0xce>
 80008dc:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <__aeabi_fsub+0x38c>)
 80008de:	1a24      	subs	r4, r4, r0
 80008e0:	4033      	ands	r3, r6
 80008e2:	e70f      	b.n	8000704 <__aeabi_fsub+0xac>
 80008e4:	2eff      	cmp	r6, #255	; 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fsub+0x292>
 80008e8:	e76a      	b.n	80007c0 <__aeabi_fsub+0x168>
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	4662      	mov	r2, ip
 80008ee:	04db      	lsls	r3, r3, #19
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4694      	mov	ip, r2
 80008f4:	2301      	movs	r3, #1
 80008f6:	281b      	cmp	r0, #27
 80008f8:	dc09      	bgt.n	800090e <__aeabi_fsub+0x2b6>
 80008fa:	2420      	movs	r4, #32
 80008fc:	4663      	mov	r3, ip
 80008fe:	4662      	mov	r2, ip
 8000900:	40c3      	lsrs	r3, r0
 8000902:	1a20      	subs	r0, r4, r0
 8000904:	4082      	lsls	r2, r0
 8000906:	0010      	movs	r0, r2
 8000908:	1e44      	subs	r4, r0, #1
 800090a:	41a0      	sbcs	r0, r4
 800090c:	4303      	orrs	r3, r0
 800090e:	4652      	mov	r2, sl
 8000910:	000d      	movs	r5, r1
 8000912:	0034      	movs	r4, r6
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	e6dc      	b.n	80006d2 <__aeabi_fsub+0x7a>
 8000918:	4663      	mov	r3, ip
 800091a:	4652      	mov	r2, sl
 800091c:	1a9e      	subs	r6, r3, r2
 800091e:	0173      	lsls	r3, r6, #5
 8000920:	d417      	bmi.n	8000952 <__aeabi_fsub+0x2fa>
 8000922:	2e00      	cmp	r6, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x2d0>
 8000926:	e6d9      	b.n	80006dc <__aeabi_fsub+0x84>
 8000928:	2500      	movs	r5, #0
 800092a:	2000      	movs	r0, #0
 800092c:	2700      	movs	r7, #0
 800092e:	e6fa      	b.n	8000726 <__aeabi_fsub+0xce>
 8000930:	4663      	mov	r3, ip
 8000932:	2b00      	cmp	r3, #0
 8000934:	d044      	beq.n	80009c0 <__aeabi_fsub+0x368>
 8000936:	3901      	subs	r1, #1
 8000938:	2900      	cmp	r1, #0
 800093a:	d04c      	beq.n	80009d6 <__aeabi_fsub+0x37e>
 800093c:	2eff      	cmp	r6, #255	; 0xff
 800093e:	d000      	beq.n	8000942 <__aeabi_fsub+0x2ea>
 8000940:	e771      	b.n	8000826 <__aeabi_fsub+0x1ce>
 8000942:	4643      	mov	r3, r8
 8000944:	e73e      	b.n	80007c4 <__aeabi_fsub+0x16c>
 8000946:	2cff      	cmp	r4, #255	; 0xff
 8000948:	d0c5      	beq.n	80008d6 <__aeabi_fsub+0x27e>
 800094a:	4652      	mov	r2, sl
 800094c:	4462      	add	r2, ip
 800094e:	0853      	lsrs	r3, r2, #1
 8000950:	e7b6      	b.n	80008c0 <__aeabi_fsub+0x268>
 8000952:	4663      	mov	r3, ip
 8000954:	000d      	movs	r5, r1
 8000956:	1ad6      	subs	r6, r2, r3
 8000958:	e6c0      	b.n	80006dc <__aeabi_fsub+0x84>
 800095a:	4662      	mov	r2, ip
 800095c:	2a00      	cmp	r2, #0
 800095e:	d116      	bne.n	800098e <__aeabi_fsub+0x336>
 8000960:	4653      	mov	r3, sl
 8000962:	2b00      	cmp	r3, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x310>
 8000966:	e72b      	b.n	80007c0 <__aeabi_fsub+0x168>
 8000968:	2780      	movs	r7, #128	; 0x80
 800096a:	2500      	movs	r5, #0
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	03ff      	lsls	r7, r7, #15
 8000970:	e6d9      	b.n	8000726 <__aeabi_fsub+0xce>
 8000972:	000d      	movs	r5, r1
 8000974:	4643      	mov	r3, r8
 8000976:	0034      	movs	r4, r6
 8000978:	e7a6      	b.n	80008c8 <__aeabi_fsub+0x270>
 800097a:	4653      	mov	r3, sl
 800097c:	4463      	add	r3, ip
 800097e:	e6f7      	b.n	8000770 <__aeabi_fsub+0x118>
 8000980:	4663      	mov	r3, ip
 8000982:	4652      	mov	r2, sl
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	e6a4      	b.n	80006d2 <__aeabi_fsub+0x7a>
 8000988:	4662      	mov	r2, ip
 800098a:	2a00      	cmp	r2, #0
 800098c:	d0d9      	beq.n	8000942 <__aeabi_fsub+0x2ea>
 800098e:	4652      	mov	r2, sl
 8000990:	2a00      	cmp	r2, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x33e>
 8000994:	e716      	b.n	80007c4 <__aeabi_fsub+0x16c>
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	4213      	tst	r3, r2
 800099c:	d100      	bne.n	80009a0 <__aeabi_fsub+0x348>
 800099e:	e711      	b.n	80007c4 <__aeabi_fsub+0x16c>
 80009a0:	4640      	mov	r0, r8
 80009a2:	4210      	tst	r0, r2
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fsub+0x350>
 80009a6:	e70d      	b.n	80007c4 <__aeabi_fsub+0x16c>
 80009a8:	e70a      	b.n	80007c0 <__aeabi_fsub+0x168>
 80009aa:	4652      	mov	r2, sl
 80009ac:	000d      	movs	r5, r1
 80009ae:	0034      	movs	r4, r6
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	e68e      	b.n	80006d2 <__aeabi_fsub+0x7a>
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d008      	beq.n	80009cc <__aeabi_fsub+0x374>
 80009ba:	000d      	movs	r5, r1
 80009bc:	4647      	mov	r7, r8
 80009be:	e6b2      	b.n	8000726 <__aeabi_fsub+0xce>
 80009c0:	4643      	mov	r3, r8
 80009c2:	0034      	movs	r4, r6
 80009c4:	e780      	b.n	80008c8 <__aeabi_fsub+0x270>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_fsub+0x374>
 80009ca:	e779      	b.n	80008c0 <__aeabi_fsub+0x268>
 80009cc:	2500      	movs	r5, #0
 80009ce:	2700      	movs	r7, #0
 80009d0:	e6a9      	b.n	8000726 <__aeabi_fsub+0xce>
 80009d2:	4647      	mov	r7, r8
 80009d4:	e6a7      	b.n	8000726 <__aeabi_fsub+0xce>
 80009d6:	4653      	mov	r3, sl
 80009d8:	0034      	movs	r4, r6
 80009da:	4463      	add	r3, ip
 80009dc:	e6c8      	b.n	8000770 <__aeabi_fsub+0x118>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	7dffffff 	.word	0x7dffffff
 80009e4:	fbffffff 	.word	0xfbffffff

080009e8 <__aeabi_f2iz>:
 80009e8:	0241      	lsls	r1, r0, #9
 80009ea:	0042      	lsls	r2, r0, #1
 80009ec:	0fc3      	lsrs	r3, r0, #31
 80009ee:	0a49      	lsrs	r1, r1, #9
 80009f0:	2000      	movs	r0, #0
 80009f2:	0e12      	lsrs	r2, r2, #24
 80009f4:	2a7e      	cmp	r2, #126	; 0x7e
 80009f6:	d903      	bls.n	8000a00 <__aeabi_f2iz+0x18>
 80009f8:	2a9d      	cmp	r2, #157	; 0x9d
 80009fa:	d902      	bls.n	8000a02 <__aeabi_f2iz+0x1a>
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <__aeabi_f2iz+0x3c>)
 80009fe:	1898      	adds	r0, r3, r2
 8000a00:	4770      	bx	lr
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	0400      	lsls	r0, r0, #16
 8000a06:	4301      	orrs	r1, r0
 8000a08:	2a95      	cmp	r2, #149	; 0x95
 8000a0a:	dc07      	bgt.n	8000a1c <__aeabi_f2iz+0x34>
 8000a0c:	2096      	movs	r0, #150	; 0x96
 8000a0e:	1a82      	subs	r2, r0, r2
 8000a10:	40d1      	lsrs	r1, r2
 8000a12:	4248      	negs	r0, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f3      	bne.n	8000a00 <__aeabi_f2iz+0x18>
 8000a18:	0008      	movs	r0, r1
 8000a1a:	e7f1      	b.n	8000a00 <__aeabi_f2iz+0x18>
 8000a1c:	3a96      	subs	r2, #150	; 0x96
 8000a1e:	4091      	lsls	r1, r2
 8000a20:	e7f7      	b.n	8000a12 <__aeabi_f2iz+0x2a>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	7fffffff 	.word	0x7fffffff

08000a28 <__aeabi_cfrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	1c08      	adds	r0, r1, #0
 8000a2c:	4661      	mov	r1, ip
 8000a2e:	e7ff      	b.n	8000a30 <__aeabi_cfcmpeq>

08000a30 <__aeabi_cfcmpeq>:
 8000a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a32:	f000 f8d1 	bl	8000bd8 <__lesf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d401      	bmi.n	8000a3e <__aeabi_cfcmpeq+0xe>
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	42c8      	cmn	r0, r1
 8000a3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000a40 <__aeabi_fcmpeq>:
 8000a40:	b510      	push	{r4, lr}
 8000a42:	f000 f855 	bl	8000af0 <__eqsf2>
 8000a46:	4240      	negs	r0, r0
 8000a48:	3001      	adds	r0, #1
 8000a4a:	bd10      	pop	{r4, pc}

08000a4c <__aeabi_fcmplt>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	f000 f8c3 	bl	8000bd8 <__lesf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fcmplt+0xe>
 8000a56:	2000      	movs	r0, #0
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)

08000a60 <__aeabi_fcmple>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	f000 f8b9 	bl	8000bd8 <__lesf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	dd01      	ble.n	8000a6e <__aeabi_fcmple+0xe>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	2001      	movs	r0, #1
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <__aeabi_fcmpgt>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	f000 f863 	bl	8000b40 <__gesf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	dc01      	bgt.n	8000a82 <__aeabi_fcmpgt+0xe>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	2001      	movs	r0, #1
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <__aeabi_fcmpge>:
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	f000 f859 	bl	8000b40 <__gesf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	da01      	bge.n	8000a96 <__aeabi_fcmpge+0xe>
 8000a92:	2000      	movs	r0, #0
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	2001      	movs	r0, #1
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)

08000a9c <__clzsi2>:
 8000a9c:	211c      	movs	r1, #28
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d301      	bcc.n	8000aaa <__clzsi2+0xe>
 8000aa6:	0c00      	lsrs	r0, r0, #16
 8000aa8:	3910      	subs	r1, #16
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	4298      	cmp	r0, r3
 8000aae:	d301      	bcc.n	8000ab4 <__clzsi2+0x18>
 8000ab0:	0a00      	lsrs	r0, r0, #8
 8000ab2:	3908      	subs	r1, #8
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	4298      	cmp	r0, r3
 8000ab8:	d301      	bcc.n	8000abe <__clzsi2+0x22>
 8000aba:	0900      	lsrs	r0, r0, #4
 8000abc:	3904      	subs	r1, #4
 8000abe:	a202      	add	r2, pc, #8	; (adr r2, 8000ac8 <__clzsi2+0x2c>)
 8000ac0:	5c10      	ldrb	r0, [r2, r0]
 8000ac2:	1840      	adds	r0, r0, r1
 8000ac4:	4770      	bx	lr
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	02020304 	.word	0x02020304
 8000acc:	01010101 	.word	0x01010101
	...

08000ad8 <__clzdi2>:
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d103      	bne.n	8000ae6 <__clzdi2+0xe>
 8000ade:	f7ff ffdd 	bl	8000a9c <__clzsi2>
 8000ae2:	3020      	adds	r0, #32
 8000ae4:	e002      	b.n	8000aec <__clzdi2+0x14>
 8000ae6:	1c08      	adds	r0, r1, #0
 8000ae8:	f7ff ffd8 	bl	8000a9c <__clzsi2>
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)

08000af0 <__eqsf2>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	0042      	lsls	r2, r0, #1
 8000af4:	024e      	lsls	r6, r1, #9
 8000af6:	004c      	lsls	r4, r1, #1
 8000af8:	0245      	lsls	r5, r0, #9
 8000afa:	0a6d      	lsrs	r5, r5, #9
 8000afc:	0e12      	lsrs	r2, r2, #24
 8000afe:	0fc3      	lsrs	r3, r0, #31
 8000b00:	0a76      	lsrs	r6, r6, #9
 8000b02:	0e24      	lsrs	r4, r4, #24
 8000b04:	0fc9      	lsrs	r1, r1, #31
 8000b06:	2aff      	cmp	r2, #255	; 0xff
 8000b08:	d00f      	beq.n	8000b2a <__eqsf2+0x3a>
 8000b0a:	2cff      	cmp	r4, #255	; 0xff
 8000b0c:	d011      	beq.n	8000b32 <__eqsf2+0x42>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	42a2      	cmp	r2, r4
 8000b12:	d000      	beq.n	8000b16 <__eqsf2+0x26>
 8000b14:	bd70      	pop	{r4, r5, r6, pc}
 8000b16:	42b5      	cmp	r5, r6
 8000b18:	d1fc      	bne.n	8000b14 <__eqsf2+0x24>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d00d      	beq.n	8000b3a <__eqsf2+0x4a>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	d1f8      	bne.n	8000b14 <__eqsf2+0x24>
 8000b22:	0028      	movs	r0, r5
 8000b24:	1e45      	subs	r5, r0, #1
 8000b26:	41a8      	sbcs	r0, r5
 8000b28:	e7f4      	b.n	8000b14 <__eqsf2+0x24>
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d1f1      	bne.n	8000b14 <__eqsf2+0x24>
 8000b30:	e7eb      	b.n	8000b0a <__eqsf2+0x1a>
 8000b32:	2001      	movs	r0, #1
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d1ed      	bne.n	8000b14 <__eqsf2+0x24>
 8000b38:	e7e9      	b.n	8000b0e <__eqsf2+0x1e>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	e7ea      	b.n	8000b14 <__eqsf2+0x24>
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <__gesf2>:
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	0042      	lsls	r2, r0, #1
 8000b44:	0246      	lsls	r6, r0, #9
 8000b46:	024d      	lsls	r5, r1, #9
 8000b48:	004c      	lsls	r4, r1, #1
 8000b4a:	0fc3      	lsrs	r3, r0, #31
 8000b4c:	0a76      	lsrs	r6, r6, #9
 8000b4e:	0e12      	lsrs	r2, r2, #24
 8000b50:	0a6d      	lsrs	r5, r5, #9
 8000b52:	0e24      	lsrs	r4, r4, #24
 8000b54:	0fc8      	lsrs	r0, r1, #31
 8000b56:	2aff      	cmp	r2, #255	; 0xff
 8000b58:	d01f      	beq.n	8000b9a <__gesf2+0x5a>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d010      	beq.n	8000b80 <__gesf2+0x40>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d11f      	bne.n	8000ba2 <__gesf2+0x62>
 8000b62:	4271      	negs	r1, r6
 8000b64:	4171      	adcs	r1, r6
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d101      	bne.n	8000b6e <__gesf2+0x2e>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d01e      	beq.n	8000bac <__gesf2+0x6c>
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d10e      	bne.n	8000b90 <__gesf2+0x50>
 8000b72:	4283      	cmp	r3, r0
 8000b74:	d01e      	beq.n	8000bb4 <__gesf2+0x74>
 8000b76:	2102      	movs	r1, #2
 8000b78:	1e58      	subs	r0, r3, #1
 8000b7a:	4008      	ands	r0, r1
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d126      	bne.n	8000bd2 <__gesf2+0x92>
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d1f4      	bne.n	8000b72 <__gesf2+0x32>
 8000b88:	4271      	negs	r1, r6
 8000b8a:	4171      	adcs	r1, r6
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d0f0      	beq.n	8000b72 <__gesf2+0x32>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d1f4      	bne.n	8000b7e <__gesf2+0x3e>
 8000b94:	2001      	movs	r0, #1
 8000b96:	4240      	negs	r0, r0
 8000b98:	e7f1      	b.n	8000b7e <__gesf2+0x3e>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d119      	bne.n	8000bd2 <__gesf2+0x92>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d0ee      	beq.n	8000b80 <__gesf2+0x40>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d1e5      	bne.n	8000b72 <__gesf2+0x32>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1e3      	bne.n	8000b72 <__gesf2+0x32>
 8000baa:	e7e4      	b.n	8000b76 <__gesf2+0x36>
 8000bac:	2000      	movs	r0, #0
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__gesf2+0x3e>
 8000bb2:	e7e0      	b.n	8000b76 <__gesf2+0x36>
 8000bb4:	42a2      	cmp	r2, r4
 8000bb6:	dc05      	bgt.n	8000bc4 <__gesf2+0x84>
 8000bb8:	dbea      	blt.n	8000b90 <__gesf2+0x50>
 8000bba:	42ae      	cmp	r6, r5
 8000bbc:	d802      	bhi.n	8000bc4 <__gesf2+0x84>
 8000bbe:	d3e7      	bcc.n	8000b90 <__gesf2+0x50>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	e7dc      	b.n	8000b7e <__gesf2+0x3e>
 8000bc4:	4241      	negs	r1, r0
 8000bc6:	4141      	adcs	r1, r0
 8000bc8:	4248      	negs	r0, r1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4008      	ands	r0, r1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d5      	b.n	8000b7e <__gesf2+0x3e>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7d2      	b.n	8000b7e <__gesf2+0x3e>

08000bd8 <__lesf2>:
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0246      	lsls	r6, r0, #9
 8000bde:	024d      	lsls	r5, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a76      	lsrs	r6, r6, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a6d      	lsrs	r5, r5, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d00d      	beq.n	8000c0e <__lesf2+0x36>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d00f      	beq.n	8000c16 <__lesf2+0x3e>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d123      	bne.n	8000c42 <__lesf2+0x6a>
 8000bfa:	4271      	negs	r1, r6
 8000bfc:	4171      	adcs	r1, r6
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d10f      	bne.n	8000c22 <__lesf2+0x4a>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d10d      	bne.n	8000c22 <__lesf2+0x4a>
 8000c06:	2000      	movs	r0, #0
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d014      	beq.n	8000c36 <__lesf2+0x5e>
 8000c0c:	e00d      	b.n	8000c2a <__lesf2+0x52>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d110      	bne.n	8000c34 <__lesf2+0x5c>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d115      	bne.n	8000c42 <__lesf2+0x6a>
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d10c      	bne.n	8000c34 <__lesf2+0x5c>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d103      	bne.n	8000c26 <__lesf2+0x4e>
 8000c1e:	4271      	negs	r1, r6
 8000c20:	4171      	adcs	r1, r6
 8000c22:	2900      	cmp	r1, #0
 8000c24:	d108      	bne.n	8000c38 <__lesf2+0x60>
 8000c26:	4283      	cmp	r3, r0
 8000c28:	d010      	beq.n	8000c4c <__lesf2+0x74>
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	1e58      	subs	r0, r3, #1
 8000c2e:	4008      	ands	r0, r1
 8000c30:	3801      	subs	r0, #1
 8000c32:	e000      	b.n	8000c36 <__lesf2+0x5e>
 8000c34:	2002      	movs	r0, #2
 8000c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d1fc      	bne.n	8000c36 <__lesf2+0x5e>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	4240      	negs	r0, r0
 8000c40:	e7f9      	b.n	8000c36 <__lesf2+0x5e>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d1ef      	bne.n	8000c26 <__lesf2+0x4e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d1ed      	bne.n	8000c26 <__lesf2+0x4e>
 8000c4a:	e7ee      	b.n	8000c2a <__lesf2+0x52>
 8000c4c:	42a2      	cmp	r2, r4
 8000c4e:	dc05      	bgt.n	8000c5c <__lesf2+0x84>
 8000c50:	dbf2      	blt.n	8000c38 <__lesf2+0x60>
 8000c52:	42ae      	cmp	r6, r5
 8000c54:	d802      	bhi.n	8000c5c <__lesf2+0x84>
 8000c56:	d3ef      	bcc.n	8000c38 <__lesf2+0x60>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e7ec      	b.n	8000c36 <__lesf2+0x5e>
 8000c5c:	4241      	negs	r1, r0
 8000c5e:	4141      	adcs	r1, r0
 8000c60:	4248      	negs	r0, r1
 8000c62:	2102      	movs	r1, #2
 8000c64:	4008      	ands	r0, r1
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7e5      	b.n	8000c36 <__lesf2+0x5e>
 8000c6a:	46c0      	nop			; (mov r8, r8)

08000c6c <ccs811_init>:
/**
  * @brief  initialization process for the ccs811 sensor
  * @retval None
  */
void ccs811_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af04      	add	r7, sp, #16
	uint8_t startup_conf = APP_START;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	22f4      	movs	r2, #244	; 0xf4
 8000c76:	701a      	strb	r2, [r3, #0]
	uint8_t meas_mode_conf = 0;
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	meas_mode_conf = DRIVE_MODE(DRIVE_MODE_MODE1);
 8000c7e:	1dbb      	adds	r3, r7, #6
 8000c80:	2210      	movs	r2, #16
 8000c82:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&CCS811_I2C_HANDLER, CCS811_I2C_ADDR<<1, &startup_conf, 1, 100);	//start application
 8000c84:	1dfa      	adds	r2, r7, #7
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <ccs811_init+0x60>)
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	21b4      	movs	r1, #180	; 0xb4
 8000c90:	f000 fe42 	bl	8001918 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fb4f 	bl	8001338 <HAL_Delay>
	HAL_I2C_Mem_Write(&CCS811_I2C_HANDLER, CCS811_I2C_ADDR<<1, MEAS_MODE, I2C_MEMADD_SIZE_8BIT, &meas_mode_conf, 1, 100); //configure
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <ccs811_init+0x60>)
 8000c9c:	2364      	movs	r3, #100	; 0x64
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2201      	movs	r2, #1
 8000cac:	21b4      	movs	r1, #180	; 0xb4
 8000cae:	f000 ff3b 	bl	8001b28 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fb40 	bl	8001338 <HAL_Delay>
	ccs811_temp_rh_compensation(20.0, 20.0);
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <ccs811_init+0x64>)
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <ccs811_init+0x64>)
 8000cbc:	1c11      	adds	r1, r2, #0
 8000cbe:	1c18      	adds	r0, r3, #0
 8000cc0:	f000 f854 	bl	8000d6c <ccs811_temp_rh_compensation>
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000028 	.word	0x20000028
 8000cd0:	41a00000 	.word	0x41a00000

08000cd4 <ccs811_measureCO2>:
/**
  * @brief  read sensor i2c co2 register
  * @retval CO2 concentration in ppb
  */
uint32_t ccs811_measureCO2(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	uint32_t co2 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
	uint32_t tvoc = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
	ccs811_measure_CO2_TVOC(&co2, &tvoc);
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 f805 	bl	8000cf8 <ccs811_measure_CO2_TVOC>
	return co2;
 8000cee:	687b      	ldr	r3, [r7, #4]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <ccs811_measure_CO2_TVOC>:
  * @param  co2		return CO2 concentration in ppb
  * @param  tvoc	return TVOC concentration in ppb
  * @retval None
  */
void ccs811_measure_CO2_TVOC(uint32_t *co2, uint32_t *tvoc)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	uint8_t alg_result[4] = {0};
 8000d02:	210c      	movs	r1, #12
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
	uint32_t aux_co2;
	uint32_t aux_tvoc;

	HAL_I2C_Mem_Read(&CCS811_I2C_HANDLER, CCS811_I2C_ADDR<<1, ALG_RESULT_DATA, I2C_MEMADD_SIZE_8BIT, alg_result, 4, 100);
 8000d0a:	4817      	ldr	r0, [pc, #92]	; (8000d68 <ccs811_measure_CO2_TVOC+0x70>)
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	2304      	movs	r3, #4
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	000c      	movs	r4, r1
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	21b4      	movs	r1, #180	; 0xb4
 8000d20:	f001 f830 	bl	8001d84 <HAL_I2C_Mem_Read>

	aux_co2 = alg_result[1] + (alg_result[0]<<8);		//co2 in ppm
 8000d24:	0021      	movs	r1, r4
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
	aux_tvoc = alg_result[2] + (alg_result[3]<<8);	//tvoc in ppb
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	78db      	ldrb	r3, [r3, #3]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	613b      	str	r3, [r7, #16]

	*co2 = aux_co2 * 1000;	//co2 in ppb
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	0013      	movs	r3, r2
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	189b      	adds	r3, r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	001a      	movs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
	*tvoc = aux_tvoc;				//tvoc in ppb
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b007      	add	sp, #28
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	20000028 	.word	0x20000028

08000d6c <ccs811_temp_rh_compensation>:
  * @param  temp	temperature value for compensation
  * @param  rh		humidity value for compensation
  * @retval None
  */
void ccs811_temp_rh_compensation(float temp, float rh)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	uint8_t env_data[4] = {0};
 8000d76:	240c      	movs	r4, #12
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

	env_data[0] = (( (uint32_t)(rh*512) ) & 0xFF00)>>8;		//humidity high byte
 8000d7e:	2188      	movs	r1, #136	; 0x88
 8000d80:	05c9      	lsls	r1, r1, #23
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	f7ff fb4e 	bl	8000424 <__aeabi_fmul>
 8000d88:	1c03      	adds	r3, r0, #0
 8000d8a:	1c18      	adds	r0, r3, #0
 8000d8c:	f7ff fa66 	bl	800025c <__aeabi_f2uiz>
 8000d90:	0003      	movs	r3, r0
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	701a      	strb	r2, [r3, #0]
	env_data[1] = (( (uint32_t)(rh*512) ) & 0x00FF);		//humidity low byte
 8000d9a:	2188      	movs	r1, #136	; 0x88
 8000d9c:	05c9      	lsls	r1, r1, #23
 8000d9e:	6838      	ldr	r0, [r7, #0]
 8000da0:	f7ff fb40 	bl	8000424 <__aeabi_fmul>
 8000da4:	1c03      	adds	r3, r0, #0
 8000da6:	1c18      	adds	r0, r3, #0
 8000da8:	f7ff fa58 	bl	800025c <__aeabi_f2uiz>
 8000dac:	0003      	movs	r3, r0
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	705a      	strb	r2, [r3, #1]

	env_data[2] = (( (uint32_t)(rh*512)-25 ) & 0xFF00)>>8;	//temperature high byte
 8000db4:	2188      	movs	r1, #136	; 0x88
 8000db6:	05c9      	lsls	r1, r1, #23
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff fb33 	bl	8000424 <__aeabi_fmul>
 8000dbe:	1c03      	adds	r3, r0, #0
 8000dc0:	1c18      	adds	r0, r3, #0
 8000dc2:	f7ff fa4b 	bl	800025c <__aeabi_f2uiz>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	3b19      	subs	r3, #25
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	709a      	strb	r2, [r3, #2]
	env_data[3] = (( (uint32_t)(rh*512)-25 ) & 0x00FF);		//temperature low byte
 8000dd2:	2188      	movs	r1, #136	; 0x88
 8000dd4:	05c9      	lsls	r1, r1, #23
 8000dd6:	6838      	ldr	r0, [r7, #0]
 8000dd8:	f7ff fb24 	bl	8000424 <__aeabi_fmul>
 8000ddc:	1c03      	adds	r3, r0, #0
 8000dde:	1c18      	adds	r0, r3, #0
 8000de0:	f7ff fa3c 	bl	800025c <__aeabi_f2uiz>
 8000de4:	0003      	movs	r3, r0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	3b19      	subs	r3, #25
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Mem_Write(&CCS811_I2C_HANDLER, CCS811_I2C_ADDR<<1, ENV_DATA, I2C_MEMADD_SIZE_8BIT, env_data, 4, 100);
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <ccs811_temp_rh_compensation+0xa4>)
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2304      	movs	r3, #4
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2205      	movs	r2, #5
 8000e02:	21b4      	movs	r1, #180	; 0xb4
 8000e04:	f000 fe90 	bl	8001b28 <HAL_I2C_Mem_Write>
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b005      	add	sp, #20
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	20000028 	.word	0x20000028

08000e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f002 fdb2 	bl	800398c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_GPIO_Init+0x68>)
 8000e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_GPIO_Init+0x68>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_GPIO_Init+0x68>)
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HARTBEAT_LED_GPIO_Port, HARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	2200      	movs	r2, #0
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fcb1 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HARTBEAT_LED_Pin;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2201      	movs	r2, #1
 8000e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000e66:	1d3a      	adds	r2, r7, #4
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 fb3a 	bl	80014e8 <HAL_GPIO_Init>

}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b006      	add	sp, #24
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000

08000e80 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <MX_I2C2_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000509;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_I2C2_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 fc95 	bl	80017ec <HAL_I2C_Init>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 f8c1 	bl	800104c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fade 	bl	8002490 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f8b8 	bl	800104c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <MX_I2C2_Init+0x74>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fb21 	bl	8002528 <HAL_I2CEx_ConfigDigitalFilter>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f8af 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000028 	.word	0x20000028
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	00000509 	.word	0x00000509

08000f00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	; 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	2414      	movs	r4, #20
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f002 fd3a 	bl	800398c <memset>
  if(i2cHandle->Instance==I2C2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_I2C_MspInit+0x90>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d131      	bne.n	8000f86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	22c0      	movs	r2, #192	; 0xc0
 8000f3e:	0152      	lsls	r2, r2, #5
 8000f40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	0021      	movs	r1, r4
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2212      	movs	r2, #18
 8000f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2206      	movs	r2, #6
 8000f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	187a      	adds	r2, r7, r1
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fabf 	bl	80014e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	03c9      	lsls	r1, r1, #15
 8000f74:	430a      	orrs	r2, r1
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_I2C_MspInit+0x94>)
 8000f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	03db      	lsls	r3, r3, #15
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b00b      	add	sp, #44	; 0x2c
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40005800 	.word	0x40005800
 8000f94:	40021000 	.word	0x40021000

08000f98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f9c:	f000 f946 	bl	800122c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fa0:	f000 f80b 	bl	8000fba <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa4:	f7ff ff36 	bl	8000e14 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000fa8:	f7ff ff6a 	bl	8000e80 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8000fac:	f000 f894 	bl	80010d8 <MX_USART2_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	ccs811_init();
 8000fb0:	f7ff fe5c 	bl	8000c6c <ccs811_init>

	while (1) {
		ccs811_measureCO2();
 8000fb4:	f7ff fe8e 	bl	8000cd4 <ccs811_measureCO2>
	while (1) {
 8000fb8:	e7fc      	b.n	8000fb4 <main+0x1c>

08000fba <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fba:	b590      	push	{r4, r7, lr}
 8000fbc:	b093      	sub	sp, #76	; 0x4c
 8000fbe:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fc0:	2410      	movs	r4, #16
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	2338      	movs	r3, #56	; 0x38
 8000fc8:	001a      	movs	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f002 fcde 	bl	800398c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f002 fcd7 	bl	800398c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 faec 	bl	80025c0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001008:	193b      	adds	r3, r7, r4
 800100a:	0018      	movs	r0, r3
 800100c:	f001 fb24 	bl	8002658 <HAL_RCC_OscConfig>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x5e>
		Error_Handler();
 8001014:	f000 f81a 	bl	800104c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001018:	003b      	movs	r3, r7
 800101a:	2207      	movs	r2, #7
 800101c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001024:	003b      	movs	r3, r7
 8001026:	22a0      	movs	r2, #160	; 0xa0
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	003b      	movs	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001032:	003b      	movs	r3, r7
 8001034:	2100      	movs	r1, #0
 8001036:	0018      	movs	r0, r3
 8001038:	f001 fe2e 	bl	8002c98 <HAL_RCC_ClockConfig>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x8a>
		Error_Handler();
 8001040:	f000 f804 	bl	800104c <Error_Handler>
	}
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b013      	add	sp, #76	; 0x4c
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0549      	lsls	r1, r1, #21
 8001080:	430a      	orrs	r2, r1
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_MspInit+0x44>)
 8001086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	4013      	ands	r3, r2
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f91c 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_USART2_UART_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <MX_USART2_UART_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_USART2_UART_Init+0x64>)
 80010e4:	2296      	movs	r2, #150	; 0x96
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_USART2_UART_Init+0x64>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	0152      	lsls	r2, r2, #5
 80010f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART2_UART_Init+0x64>)
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART2_UART_Init+0x64>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_USART2_UART_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART2_UART_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_USART2_UART_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART2_UART_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_USART2_UART_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <MX_USART2_UART_Init+0x64>)
 8001126:	0018      	movs	r0, r3
 8001128:	f001 ff60 	bl	8002fec <HAL_UART_Init>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001130:	f7ff ff8c 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000074 	.word	0x20000074
 8001140:	40004400 	.word	0x40004400

08001144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	2414      	movs	r4, #20
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	2314      	movs	r3, #20
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f002 fc18 	bl	800398c <memset>
  if(uartHandle->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0x8c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d130      	bne.n	80011c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0x90>)
 8001168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0x90>)
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	0289      	lsls	r1, r1, #10
 8001170:	430a      	orrs	r2, r1
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x90>)
 8001176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0x90>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_UART_MspInit+0x90>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0x90>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119a:	0021      	movs	r1, r4
 800119c:	187b      	adds	r3, r7, r1
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2202      	movs	r2, #2
 80011a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2201      	movs	r2, #1
 80011b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	187a      	adds	r2, r7, r1
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f990 	bl	80014e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b00b      	add	sp, #44	; 0x2c
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40004400 	.word	0x40004400
 80011d4:	40021000 	.word	0x40021000

080011d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011dc:	f7ff ff77 	bl	80010ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	; (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	; (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001206:	f002 fb9d 	bl	8003944 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800120a:	f7ff fec5 	bl	8000f98 <main>

0800120e <LoopForever>:

LoopForever:
  b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   r0, =_estack
 8001210:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800121c:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8001220:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001224:	20000108 	.word	0x20000108

08001228 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_IRQHandler>
	...

0800122c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x3c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Init+0x3c>)
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	0049      	lsls	r1, r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f810 	bl	800126c <HAL_InitTick>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d003      	beq.n	8001258 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	e001      	b.n	800125c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fefe 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_InitTick+0x88>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02b      	beq.n	80012dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_InitTick+0x8c>)
 8001286:	681c      	ldr	r4, [r3, #0]
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_InitTick+0x88>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	0019      	movs	r1, r3
 800128e:	23fa      	movs	r3, #250	; 0xfa
 8001290:	0098      	lsls	r0, r3, #2
 8001292:	f7fe ff37 	bl	8000104 <__udivsi3>
 8001296:	0003      	movs	r3, r0
 8001298:	0019      	movs	r1, r3
 800129a:	0020      	movs	r0, r4
 800129c:	f7fe ff32 	bl	8000104 <__udivsi3>
 80012a0:	0003      	movs	r3, r0
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 f913 	bl	80014ce <HAL_SYSTICK_Config>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d112      	bne.n	80012d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d80a      	bhi.n	80012c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	2301      	movs	r3, #1
 80012b6:	425b      	negs	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f8f2 	bl	80014a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_InitTick+0x90>)
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e00d      	b.n	80012e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e008      	b.n	80012e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d2:	230f      	movs	r3, #15
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e003      	b.n	80012e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	230f      	movs	r3, #15
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	781b      	ldrb	r3, [r3, #0]
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b005      	add	sp, #20
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	18d2      	adds	r2, r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000008 	.word	0x20000008
 8001320:	20000104 	.word	0x20000104

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	20000104 	.word	0x20000104

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff fff0 	bl	8001324 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	001a      	movs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	189b      	adds	r3, r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	f7ff ffe0 	bl	8001324 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	20000008 	.word	0x20000008

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	d828      	bhi.n	80013e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001396:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <__NVIC_SetPriority+0xd4>)
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	33c0      	adds	r3, #192	; 0xc0
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	589b      	ldr	r3, [r3, r2]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	0011      	movs	r1, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	400a      	ands	r2, r1
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	21ff      	movs	r1, #255	; 0xff
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	401a      	ands	r2, r3
 80013bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	22ff      	movs	r2, #255	; 0xff
 80013c4:	401a      	ands	r2, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	2303      	movs	r3, #3
 80013ce:	4003      	ands	r3, r0
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	481f      	ldr	r0, [pc, #124]	; (8001454 <__NVIC_SetPriority+0xd4>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	33c0      	adds	r3, #192	; 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e031      	b.n	800144c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	400b      	ands	r3, r1
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3306      	adds	r3, #6
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1dfa      	adds	r2, r7, #7
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	0011      	movs	r1, r2
 8001408:	2203      	movs	r2, #3
 800140a:	400a      	ands	r2, r1
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	21ff      	movs	r1, #255	; 0xff
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	43d2      	mvns	r2, r2
 8001416:	401a      	ands	r2, r3
 8001418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	401a      	ands	r2, r3
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	2303      	movs	r3, #3
 800142a:	4003      	ands	r3, r0
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001c      	movs	r4, r3
 8001438:	230f      	movs	r3, #15
 800143a:	4023      	ands	r3, r4
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	3306      	adds	r3, #6
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	18c3      	adds	r3, r0, r3
 8001448:	3304      	adds	r3, #4
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b003      	add	sp, #12
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	045b      	lsls	r3, r3, #17
 800146c:	429a      	cmp	r2, r3
 800146e:	d301      	bcc.n	8001474 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001470:	2301      	movs	r3, #1
 8001472:	e010      	b.n	8001496 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <SysTick_Config+0x44>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	3a01      	subs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147c:	2301      	movs	r3, #1
 800147e:	425b      	negs	r3, r3
 8001480:	2103      	movs	r1, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff7c 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x44>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	210f      	movs	r1, #15
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	0011      	movs	r1, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff ffbf 	bl	800145c <SysTick_Config>
 80014de:	0003      	movs	r3, r0
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e147      	b.n	8001788 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4091      	lsls	r1, r2
 8001502:	000a      	movs	r2, r1
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d100      	bne.n	8001510 <HAL_GPIO_Init+0x28>
 800150e:	e138      	b.n	8001782 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	4013      	ands	r3, r2
 8001518:	2b01      	cmp	r3, #1
 800151a:	d005      	beq.n	8001528 <HAL_GPIO_Init+0x40>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	2b02      	cmp	r3, #2
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	409a      	lsls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	43da      	mvns	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	2201      	movs	r2, #1
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2203      	movs	r2, #3
 8001590:	4013      	ands	r3, r2
 8001592:	2b03      	cmp	r3, #3
 8001594:	d017      	beq.n	80015c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d123      	bne.n	800161a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	58d3      	ldr	r3, [r2, r3]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2207      	movs	r2, #7
 80015e4:	4013      	ands	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2107      	movs	r1, #7
 80015fe:	400b      	ands	r3, r1
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	6939      	ldr	r1, [r7, #16]
 8001618:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	401a      	ands	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d100      	bne.n	800165c <HAL_GPIO_Init+0x174>
 800165a:	e092      	b.n	8001782 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3318      	adds	r3, #24
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	589b      	ldr	r3, [r3, r2]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	220f      	movs	r2, #15
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	23a0      	movs	r3, #160	; 0xa0
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	429a      	cmp	r2, r3
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x1ca>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_GPIO_Init+0x2bc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x1c6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a44      	ldr	r2, [pc, #272]	; (80017a8 <HAL_GPIO_Init+0x2c0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x1c2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a43      	ldr	r2, [pc, #268]	; (80017ac <HAL_GPIO_Init+0x2c4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x1be>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x1cc>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x1cc>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x1cc>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x1cc>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	2103      	movs	r1, #3
 80016b8:	400a      	ands	r2, r1
 80016ba:	00d2      	lsls	r2, r2, #3
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016c4:	4936      	ldr	r1, [pc, #216]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3318      	adds	r3, #24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	58d3      	ldr	r3, [r2, r3]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	025b      	lsls	r3, r3, #9
 80016ec:	4013      	ands	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f8:	4929      	ldr	r1, [pc, #164]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001702:	2384      	movs	r3, #132	; 0x84
 8001704:	58d3      	ldr	r3, [r2, r3]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	029b      	lsls	r3, r3, #10
 800171a:	4013      	ands	r3, r2
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001726:	491e      	ldr	r1, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001728:	2284      	movs	r2, #132	; 0x84
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	4013      	ands	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	40da      	lsrs	r2, r3
 8001790:	1e13      	subs	r3, r2, #0
 8001792:	d000      	beq.n	8001796 <HAL_GPIO_Init+0x2ae>
 8001794:	e6b0      	b.n	80014f8 <HAL_GPIO_Init+0x10>
  }
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b006      	add	sp, #24
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021800 	.word	0x40021800
 80017a4:	50000400 	.word	0x50000400
 80017a8:	50000800 	.word	0x50000800
 80017ac:	50000c00 	.word	0x50000c00

080017b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	0008      	movs	r0, r1
 80017ba:	0011      	movs	r1, r2
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	1c02      	adds	r2, r0, #0
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	1c7b      	adds	r3, r7, #1
 80017c4:	1c0a      	adds	r2, r1, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	1c7b      	adds	r3, r7, #1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017da:	1cbb      	adds	r3, r7, #2
 80017dc:	881a      	ldrh	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e082      	b.n	8001904 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff fb73 	bl	8000f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	2124      	movs	r1, #36	; 0x24
 8001820:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_I2C_Init+0x120>)
 800183c:	400a      	ands	r2, r1
 800183e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_I2C_Init+0x124>)
 800184c:	400a      	ands	r2, r1
 800184e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0209      	lsls	r1, r1, #8
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e007      	b.n	800187a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2184      	movs	r1, #132	; 0x84
 8001874:	0209      	lsls	r1, r1, #8
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d104      	bne.n	800188c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	491f      	ldr	r1, [pc, #124]	; (8001914 <HAL_I2C_Init+0x128>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_I2C_Init+0x124>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69d9      	ldr	r1, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2120      	movs	r1, #32
 80018f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2242      	movs	r2, #66	; 0x42
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f0ffffff 	.word	0xf0ffffff
 8001910:	ffff7fff 	.word	0xffff7fff
 8001914:	02008000 	.word	0x02008000

08001918 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	0008      	movs	r0, r1
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	0019      	movs	r1, r3
 8001926:	230a      	movs	r3, #10
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	1c02      	adds	r2, r0, #0
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	2308      	movs	r3, #8
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	1c0a      	adds	r2, r1, #0
 8001934:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2241      	movs	r2, #65	; 0x41
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b20      	cmp	r3, #32
 8001940:	d000      	beq.n	8001944 <HAL_I2C_Master_Transmit+0x2c>
 8001942:	e0e7      	b.n	8001b14 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	5c9b      	ldrb	r3, [r3, r2]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Master_Transmit+0x3a>
 800194e:	2302      	movs	r3, #2
 8001950:	e0e1      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2240      	movs	r2, #64	; 0x40
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800195a:	f7ff fce3 	bl	8001324 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	0219      	lsls	r1, r3, #8
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2319      	movs	r3, #25
 800196e:	2201      	movs	r2, #1
 8001970:	f000 fc24 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cc      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2121      	movs	r1, #33	; 0x21
 8001982:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2242      	movs	r2, #66	; 0x42
 8001988:	2110      	movs	r1, #16
 800198a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2208      	movs	r2, #8
 800199c:	18ba      	adds	r2, r7, r2
 800199e:	8812      	ldrh	r2, [r2, #0]
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d911      	bls.n	80019d6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	045c      	lsls	r4, r3, #17
 80019c2:	230a      	movs	r3, #10
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	8819      	ldrh	r1, [r3, #0]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_I2C_Master_Transmit+0x208>)
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	0023      	movs	r3, r4
 80019d0:	f000 fd28 	bl	8002424 <I2C_TransferConfig>
 80019d4:	e075      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	049c      	lsls	r4, r3, #18
 80019ea:	230a      	movs	r3, #10
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	8819      	ldrh	r1, [r3, #0]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_I2C_Master_Transmit+0x208>)
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	0023      	movs	r3, r4
 80019f8:	f000 fd14 	bl	8002424 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019fc:	e061      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 fc18 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e081      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03a      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0x1aa>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d136      	bne.n	8001ac2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	f000 fbab 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e053      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2bff      	cmp	r3, #255	; 0xff
 8001a76:	d911      	bls.n	8001a9c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	22ff      	movs	r2, #255	; 0xff
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	045c      	lsls	r4, r3, #17
 8001a88:	230a      	movs	r3, #10
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	8819      	ldrh	r1, [r3, #0]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	0023      	movs	r3, r4
 8001a96:	f000 fcc5 	bl	8002424 <I2C_TransferConfig>
 8001a9a:	e012      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	049c      	lsls	r4, r3, #18
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	8819      	ldrh	r1, [r3, #0]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0023      	movs	r3, r4
 8001abe:	f000 fcb1 	bl	8002424 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d198      	bne.n	80019fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fbf0 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	490c      	ldr	r1, [pc, #48]	; (8001b24 <HAL_I2C_Master_Transmit+0x20c>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2241      	movs	r2, #65	; 0x41
 8001afc:	2120      	movs	r1, #32
 8001afe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2242      	movs	r2, #66	; 0x42
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b007      	add	sp, #28
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	80002000 	.word	0x80002000
 8001b24:	fe00e800 	.word	0xfe00e800

08001b28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	000c      	movs	r4, r1
 8001b32:	0010      	movs	r0, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	230a      	movs	r3, #10
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	1c22      	adds	r2, r4, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	2308      	movs	r3, #8
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	1c02      	adds	r2, r0, #0
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	1c0a      	adds	r2, r1, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	5c9b      	ldrb	r3, [r3, r2]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d000      	beq.n	8001b5a <HAL_I2C_Mem_Write+0x32>
 8001b58:	e10c      	b.n	8001d74 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_I2C_Mem_Write+0x42>
 8001b60:	232c      	movs	r3, #44	; 0x2c
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0ff      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2C_Mem_Write+0x5c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0f8      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2101      	movs	r1, #1
 8001b8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fbca 	bl	8001324 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	0219      	lsls	r1, r3, #8
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2319      	movs	r3, #25
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f000 fb0b 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e3      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2241      	movs	r2, #65	; 0x41
 8001bb2:	2121      	movs	r1, #33	; 0x21
 8001bb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2242      	movs	r2, #66	; 0x42
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	222c      	movs	r2, #44	; 0x2c
 8001bce:	18ba      	adds	r2, r7, r2
 8001bd0:	8812      	ldrh	r2, [r2, #0]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bda:	1dbb      	adds	r3, r7, #6
 8001bdc:	881c      	ldrh	r4, [r3, #0]
 8001bde:	2308      	movs	r3, #8
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	230a      	movs	r3, #10
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	8819      	ldrh	r1, [r3, #0]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	f000 f9f9 	bl	8001fec <I2C_RequestMemoryWrite>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0b5      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d911      	bls.n	8001c38 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	22ff      	movs	r2, #255	; 0xff
 8001c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	045c      	lsls	r4, r3, #17
 8001c24:	230a      	movs	r3, #10
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	8819      	ldrh	r1, [r3, #0]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	0023      	movs	r3, r4
 8001c32:	f000 fbf7 	bl	8002424 <I2C_TransferConfig>
 8001c36:	e012      	b.n	8001c5e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	049c      	lsls	r4, r3, #18
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	8819      	ldrh	r1, [r3, #0]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	0023      	movs	r3, r4
 8001c5a:	f000 fbe3 	bl	8002424 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fae8 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e081      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03a      	beq.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d136      	bne.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	f000 fa7b 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e053      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d911      	bls.n	8001cfc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	045c      	lsls	r4, r3, #17
 8001ce8:	230a      	movs	r3, #10
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	8819      	ldrh	r1, [r3, #0]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	0023      	movs	r3, r4
 8001cf6:	f000 fb95 	bl	8002424 <I2C_TransferConfig>
 8001cfa:	e012      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	049c      	lsls	r4, r3, #18
 8001d10:	230a      	movs	r3, #10
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	8819      	ldrh	r1, [r3, #0]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	f000 fb81 	bl	8002424 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d198      	bne.n	8001c5e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fac0 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01a      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	490b      	ldr	r1, [pc, #44]	; (8001d80 <HAL_I2C_Mem_Write+0x258>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2242      	movs	r2, #66	; 0x42
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b007      	add	sp, #28
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	fe00e800 	.word	0xfe00e800

08001d84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	230a      	movs	r3, #10
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	1c22      	adds	r2, r4, #0
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	1c0a      	adds	r2, r1, #0
 8001da6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2241      	movs	r2, #65	; 0x41
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d000      	beq.n	8001db6 <HAL_I2C_Mem_Read+0x32>
 8001db4:	e110      	b.n	8001fd8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_I2C_Mem_Read+0x42>
 8001dbc:	232c      	movs	r3, #44	; 0x2c
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e103      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2C_Mem_Read+0x5c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0fc      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa9c 	bl	8001324 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	0219      	lsls	r1, r3, #8
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2319      	movs	r3, #25
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f000 f9dd 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0e7      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2241      	movs	r2, #65	; 0x41
 8001e0e:	2122      	movs	r1, #34	; 0x22
 8001e10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2242      	movs	r2, #66	; 0x42
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	222c      	movs	r2, #44	; 0x2c
 8001e2a:	18ba      	adds	r2, r7, r2
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881c      	ldrh	r4, [r3, #0]
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	881a      	ldrh	r2, [r3, #0]
 8001e40:	230a      	movs	r3, #10
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	8819      	ldrh	r1, [r3, #0]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	0023      	movs	r3, r4
 8001e52:	f000 f92f 	bl	80020b4 <I2C_RequestMemoryRead>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0b9      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d911      	bls.n	8001e94 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	045c      	lsls	r4, r3, #17
 8001e80:	230a      	movs	r3, #10
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	8819      	ldrh	r1, [r3, #0]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_I2C_Mem_Read+0x260>)
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	0023      	movs	r3, r4
 8001e8e:	f000 fac9 	bl	8002424 <I2C_TransferConfig>
 8001e92:	e012      	b.n	8001eba <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	049c      	lsls	r4, r3, #18
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	8819      	ldrh	r1, [r3, #0]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_I2C_Mem_Read+0x260>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	0023      	movs	r3, r4
 8001eb6:	f000 fab5 	bl	8002424 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	f000 f978 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e082      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03a      	beq.n	8001f86 <HAL_I2C_Mem_Read+0x202>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d136      	bne.n	8001f86 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	0013      	movs	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	f000 f949 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e053      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2bff      	cmp	r3, #255	; 0xff
 8001f3a:	d911      	bls.n	8001f60 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	045c      	lsls	r4, r3, #17
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	8819      	ldrh	r1, [r3, #0]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	0023      	movs	r3, r4
 8001f5a:	f000 fa63 	bl	8002424 <I2C_TransferConfig>
 8001f5e:	e012      	b.n	8001f86 <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	049c      	lsls	r4, r3, #18
 8001f74:	230a      	movs	r3, #10
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	8819      	ldrh	r1, [r3, #0]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	0023      	movs	r3, r4
 8001f82:	f000 fa4f 	bl	8002424 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d194      	bne.n	8001eba <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f98e 	bl	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e01a      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <HAL_I2C_Mem_Read+0x264>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2242      	movs	r2, #66	; 0x42
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b007      	add	sp, #28
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	80002400 	.word	0x80002400
 8001fe8:	fe00e800 	.word	0xfe00e800

08001fec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	000c      	movs	r4, r1
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	250a      	movs	r5, #10
 8001ffc:	197b      	adds	r3, r7, r5
 8001ffe:	1c22      	adds	r2, r4, #0
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	2308      	movs	r3, #8
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	1c0a      	adds	r2, r1, #0
 800200e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	045c      	lsls	r4, r3, #17
 800201a:	197b      	adds	r3, r7, r5
 800201c:	8819      	ldrh	r1, [r3, #0]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <I2C_RequestMemoryWrite+0xc4>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	0023      	movs	r3, r4
 8002026:	f000 f9fd 	bl	8002424 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f902 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e033      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002046:	2308      	movs	r3, #8
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
 8002054:	e019      	b.n	800208a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002056:	2308      	movs	r3, #8
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 f8e3 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e014      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800207c:	2308      	movs	r3, #8
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	0013      	movs	r3, r2
 8002094:	2200      	movs	r2, #0
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	f000 f890 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	80002000 	.word	0x80002000

080020b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	000c      	movs	r4, r1
 80020be:	0010      	movs	r0, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	250a      	movs	r5, #10
 80020c4:	197b      	adds	r3, r7, r5
 80020c6:	1c22      	adds	r2, r4, #0
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	2308      	movs	r3, #8
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	1c02      	adds	r2, r0, #0
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	1c0a      	adds	r2, r1, #0
 80020d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	8819      	ldrh	r1, [r3, #0]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <I2C_RequestMemoryRead+0xc0>)
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	f000 f99b 	bl	8002424 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f8a0 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e033      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002102:	1dbb      	adds	r3, r7, #6
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800210a:	2308      	movs	r3, #8
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
 8002118:	e019      	b.n	800214e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800211a:	2308      	movs	r3, #8
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b29b      	uxth	r3, r3
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f881 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e014      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002140:	2308      	movs	r3, #8
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	0013      	movs	r3, r2
 8002158:	2200      	movs	r2, #0
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	f000 f82e 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	80002000 	.word	0x80002000

08002178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d103      	bne.n	8002196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	619a      	str	r2, [r3, #24]
  }
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e021      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	d01e      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7ff f8a6 	bl	8001324 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	2220      	movs	r2, #32
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2241      	movs	r2, #65	; 0x41
 80021fa:	2120      	movs	r1, #32
 80021fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2242      	movs	r2, #66	; 0x42
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	425a      	negs	r2, r3
 8002222:	4153      	adcs	r3, r2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d0ce      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}

0800223a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002246:	e02b      	b.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f86e 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e029      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	d01e      	beq.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f85f 	bl	8001324 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d113      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2241      	movs	r2, #65	; 0x41
 8002288:	2120      	movs	r1, #32
 800228a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2242      	movs	r2, #66	; 0x42
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d1cc      	bne.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c4:	e028      	b.n	8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 f82f 	bl	8002330 <I2C_IsAcknowledgeFailed>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d001      	beq.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e026      	b.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff f823 	bl	8001324 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	2220      	movs	r2, #32
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2241      	movs	r2, #65	; 0x41
 8002300:	2120      	movs	r1, #32
 8002302:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2242      	movs	r2, #66	; 0x42
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2220      	movs	r2, #32
 8002320:	4013      	ands	r3, r2
 8002322:	2b20      	cmp	r3, #32
 8002324:	d1cf      	bne.n	80022c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2210      	movs	r2, #16
 8002344:	4013      	ands	r3, r2
 8002346:	2b10      	cmp	r3, #16
 8002348:	d164      	bne.n	8002414 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	049b      	lsls	r3, r3, #18
 8002354:	401a      	ands	r2, r3
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	429a      	cmp	r2, r3
 800235c:	d02b      	beq.n	80023b6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	01c9      	lsls	r1, r1, #7
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002370:	e021      	b.n	80023b6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3301      	adds	r3, #1
 8002376:	d01e      	beq.n	80023b6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002378:	f7fe ffd4 	bl	8001324 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <I2C_IsAcknowledgeFailed+0x5e>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d113      	bne.n	80023b6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	2220      	movs	r2, #32
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2241      	movs	r2, #65	; 0x41
 800239e:	2120      	movs	r1, #32
 80023a0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2242      	movs	r2, #66	; 0x42
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02f      	b.n	8002416 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2220      	movs	r2, #32
 80023be:	4013      	ands	r3, r2
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d1d6      	bne.n	8002372 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2210      	movs	r2, #16
 80023ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2220      	movs	r2, #32
 80023d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fece 	bl	8002178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <I2C_IsAcknowledgeFailed+0xf0>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	2204      	movs	r2, #4
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2241      	movs	r2, #65	; 0x41
 80023fc:	2120      	movs	r1, #32
 80023fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2242      	movs	r2, #66	; 0x42
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	0008      	movs	r0, r1
 800242e:	0011      	movs	r1, r2
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	240a      	movs	r4, #10
 8002434:	193b      	adds	r3, r7, r4
 8002436:	1c02      	adds	r2, r0, #0
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	2009      	movs	r0, #9
 800243c:	183b      	adds	r3, r7, r0
 800243e:	1c0a      	adds	r2, r1, #0
 8002440:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	0d51      	lsrs	r1, r2, #21
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	400a      	ands	r2, r1
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <I2C_TransferConfig+0x68>)
 8002454:	430a      	orrs	r2, r1
 8002456:	43d2      	mvns	r2, r2
 8002458:	401a      	ands	r2, r3
 800245a:	0011      	movs	r1, r2
 800245c:	193b      	adds	r3, r7, r4
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	059b      	lsls	r3, r3, #22
 8002462:	0d9a      	lsrs	r2, r3, #22
 8002464:	183b      	adds	r3, r7, r0
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	0418      	lsls	r0, r3, #16
 800246a:	23ff      	movs	r3, #255	; 0xff
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4003      	ands	r3, r0
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	431a      	orrs	r2, r3
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b005      	add	sp, #20
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	03ff63ff 	.word	0x03ff63ff

08002490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2241      	movs	r2, #65	; 0x41
 800249e:	5c9b      	ldrb	r3, [r3, r2]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d138      	bne.n	8002518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e032      	b.n	800251a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2241      	movs	r2, #65	; 0x41
 80024c0:	2124      	movs	r1, #36	; 0x24
 80024c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	438a      	bics	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4911      	ldr	r1, [pc, #68]	; (8002524 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2241      	movs	r2, #65	; 0x41
 8002508:	2120      	movs	r1, #32
 800250a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	ffffefff 	.word	0xffffefff

08002528 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	5c9b      	ldrb	r3, [r3, r2]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	d139      	bne.n	80025b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002548:	2302      	movs	r3, #2
 800254a:	e033      	b.n	80025b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2241      	movs	r2, #65	; 0x41
 8002558:	2124      	movs	r1, #36	; 0x24
 800255a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2241      	movs	r2, #65	; 0x41
 80025a2:	2120      	movs	r1, #32
 80025a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b004      	add	sp, #16
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	fffff0ff 	.word	0xfffff0ff

080025c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d11f      	bne.n	8002624 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	0013      	movs	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4912      	ldr	r1, [pc, #72]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fd fd86 	bl	8000104 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fe:	e008      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e001      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e009      	b.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	429a      	cmp	r2, r3
 8002622:	d0ed      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40007000 	.word	0x40007000
 8002634:	fffff9ff 	.word	0xfffff9ff
 8002638:	20000000 	.word	0x20000000
 800263c:	000f4240 	.word	0x000f4240

08002640 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	23e0      	movs	r3, #224	; 0xe0
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	4013      	ands	r3, r2
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e304      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x1e>
 8002674:	e07c      	b.n	8002770 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002676:	4bc3      	ldr	r3, [pc, #780]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2238      	movs	r2, #56	; 0x38
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002680:	4bc0      	ldr	r3, [pc, #768]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2203      	movs	r2, #3
 8002686:	4013      	ands	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b10      	cmp	r3, #16
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0x3e>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d002      	beq.n	800269c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4bb9      	ldr	r3, [pc, #740]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	4013      	ands	r3, r2
 80026a6:	d062      	beq.n	800276e <HAL_RCC_OscConfig+0x116>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15e      	bne.n	800276e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e2df      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	025b      	lsls	r3, r3, #9
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x78>
 80026c0:	4bb0      	ldr	r3, [pc, #704]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4baf      	ldr	r3, [pc, #700]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0249      	lsls	r1, r1, #9
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e020      	b.n	8002712 <HAL_RCC_OscConfig+0xba>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	23a0      	movs	r3, #160	; 0xa0
 80026d6:	02db      	lsls	r3, r3, #11
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10e      	bne.n	80026fa <HAL_RCC_OscConfig+0xa2>
 80026dc:	4ba9      	ldr	r3, [pc, #676]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4ba8      	ldr	r3, [pc, #672]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	02c9      	lsls	r1, r1, #11
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	4ba6      	ldr	r3, [pc, #664]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4ba5      	ldr	r3, [pc, #660]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0249      	lsls	r1, r1, #9
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0xba>
 80026fa:	4ba2      	ldr	r3, [pc, #648]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4ba1      	ldr	r3, [pc, #644]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002700:	49a1      	ldr	r1, [pc, #644]	; (8002988 <HAL_RCC_OscConfig+0x330>)
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	4b9f      	ldr	r3, [pc, #636]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b9e      	ldr	r3, [pc, #632]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800270c:	499f      	ldr	r1, [pc, #636]	; (800298c <HAL_RCC_OscConfig+0x334>)
 800270e:	400a      	ands	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d014      	beq.n	8002744 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fe03 	bl	8001324 <HAL_GetTick>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fdfe 	bl	8001324 <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e29e      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4b93      	ldr	r3, [pc, #588]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	029b      	lsls	r3, r3, #10
 800273e:	4013      	ands	r3, r2
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xcc>
 8002742:	e015      	b.n	8002770 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fdee 	bl	8001324 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274e:	f7fe fde9 	bl	8001324 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e289      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002760:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	4013      	ands	r3, r2
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0xf6>
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2202      	movs	r2, #2
 8002776:	4013      	ands	r3, r2
 8002778:	d100      	bne.n	800277c <HAL_RCC_OscConfig+0x124>
 800277a:	e099      	b.n	80028b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277c:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2238      	movs	r2, #56	; 0x38
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002786:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2203      	movs	r2, #3
 800278c:	4013      	ands	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b10      	cmp	r3, #16
 8002794:	d102      	bne.n	800279c <HAL_RCC_OscConfig+0x144>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d002      	beq.n	80027a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d135      	bne.n	800280e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4013      	ands	r3, r2
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x162>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e25c      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a74      	ldr	r2, [pc, #464]	; (8002990 <HAL_RCC_OscConfig+0x338>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	4b6e      	ldr	r3, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d112      	bne.n	80027fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027d6:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <HAL_RCC_OscConfig+0x33c>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	2207      	movs	r2, #7
 80027f2:	4013      	ands	r3, r2
 80027f4:	4a68      	ldr	r2, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x340>)
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x344>)
 80027fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x348>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0018      	movs	r0, r3
 8002802:	f7fe fd33 	bl	800126c <HAL_InitTick>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d051      	beq.n	80028ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e232      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d030      	beq.n	8002878 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5e      	ldr	r2, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x33c>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	4b57      	ldr	r3, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800282a:	4b56      	ldr	r3, [pc, #344]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0049      	lsls	r1, r1, #1
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fd74 	bl	8001324 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fd6f 	bl	8001324 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e20f      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4013      	ands	r3, r2
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x338>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e01b      	b.n	80028b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800287e:	4949      	ldr	r1, [pc, #292]	; (80029a4 <HAL_RCC_OscConfig+0x34c>)
 8002880:	400a      	ands	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd4e 	bl	8001324 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe fd49 	bl	8001324 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1e9      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a0:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4013      	ands	r3, r2
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x236>
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	4013      	ands	r3, r2
 80028b8:	d047      	beq.n	800294a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2238      	movs	r2, #56	; 0x38
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b18      	cmp	r3, #24
 80028c4:	d10a      	bne.n	80028dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d03c      	beq.n	800294a <HAL_RCC_OscConfig+0x2f2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d138      	bne.n	800294a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e1cb      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d019      	beq.n	8002918 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fd18 	bl	8001324 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd13 	bl	8001324 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1b3      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d0f1      	beq.n	80028fa <HAL_RCC_OscConfig+0x2a2>
 8002916:	e018      	b.n	800294a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800291a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fcfe 	bl	8001324 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe fcf9 	bl	8001324 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e199      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d1f1      	bne.n	800292e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x2fe>
 8002954:	e0c6      	b.n	8002ae4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	231f      	movs	r3, #31
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2238      	movs	r2, #56	; 0x38
 8002964:	4013      	ands	r3, r2
 8002966:	2b20      	cmp	r3, #32
 8002968:	d11e      	bne.n	80029a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x32c>)
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d100      	bne.n	8002976 <HAL_RCC_OscConfig+0x31e>
 8002974:	e0b6      	b.n	8002ae4 <HAL_RCC_OscConfig+0x48c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d000      	beq.n	8002980 <HAL_RCC_OscConfig+0x328>
 800297e:	e0b1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e177      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
 8002984:	40021000 	.word	0x40021000
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	fffbffff 	.word	0xfffbffff
 8002990:	ffff80ff 	.word	0xffff80ff
 8002994:	ffffc7ff 	.word	0xffffc7ff
 8002998:	00f42400 	.word	0x00f42400
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004
 80029a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a8:	4bb4      	ldr	r3, [pc, #720]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 80029aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	055b      	lsls	r3, r3, #21
 80029b0:	4013      	ands	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_OscConfig+0x360>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x362>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d011      	beq.n	80029e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4baf      	ldr	r3, [pc, #700]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 80029c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c2:	4bae      	ldr	r3, [pc, #696]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0549      	lsls	r1, r1, #21
 80029c8:	430a      	orrs	r2, r1
 80029ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80029cc:	4bab      	ldr	r3, [pc, #684]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 80029ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	055b      	lsls	r3, r3, #21
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029da:	231f      	movs	r3, #31
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	4ba7      	ldr	r3, [pc, #668]	; (8002c80 <HAL_RCC_OscConfig+0x628>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	d11a      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ee:	4ba4      	ldr	r3, [pc, #656]	; (8002c80 <HAL_RCC_OscConfig+0x628>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <HAL_RCC_OscConfig+0x628>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0049      	lsls	r1, r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fc92 	bl	8001324 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe fc8d 	bl	8001324 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e12d      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a18:	4b99      	ldr	r3, [pc, #612]	; (8002c80 <HAL_RCC_OscConfig+0x628>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3e2>
 8002a2c:	4b93      	ldr	r3, [pc, #588]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a38:	e01c      	b.n	8002a74 <HAL_RCC_OscConfig+0x41c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x404>
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a46:	4b8d      	ldr	r3, [pc, #564]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a48:	2104      	movs	r1, #4
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a52:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0x41c>
 8002a5c:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a60:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	438a      	bics	r2, r1
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a68:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a6c:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a6e:	2104      	movs	r1, #4
 8002a70:	438a      	bics	r2, r1
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d014      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fc52 	bl	8001324 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fc4d 	bl	8001324 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a7c      	ldr	r2, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x62c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e0ec      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b78      	ldr	r3, [pc, #480]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x42e>
 8002aa4:	e013      	b.n	8002ace <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fc3d 	bl	8001324 <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aae:	e009      	b.n	8002ac4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fc38 	bl	8001324 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x62c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0d7      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2202      	movs	r2, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ace:	231f      	movs	r3, #31
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002adc:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002ade:	496a      	ldr	r1, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x630>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d100      	bne.n	8002aee <HAL_RCC_OscConfig+0x496>
 8002aec:	e0c1      	b.n	8002c72 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2238      	movs	r2, #56	; 0x38
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d100      	bne.n	8002afc <HAL_RCC_OscConfig+0x4a4>
 8002afa:	e081      	b.n	8002c00 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d156      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b0a:	4960      	ldr	r1, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x634>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc08 	bl	8001324 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fc03 	bl	8001324 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0a3      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	049b      	lsls	r3, r3, #18
 8002b34:	4013      	ands	r3, r2
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a54      	ldr	r2, [pc, #336]	; (8002c90 <HAL_RCC_OscConfig+0x638>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	431a      	orrs	r2, r3
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	0449      	lsls	r1, r1, #17
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0549      	lsls	r1, r1, #21
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fbcc 	bl	8001324 <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fbc7 	bl	8001324 <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e067      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba4:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	049b      	lsls	r3, r3, #18
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x53a>
 8002bb0:	e05f      	b.n	8002c72 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bb8:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x634>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bd0:	4930      	ldr	r1, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x63c>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fba5 	bl	8001324 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fba0 	bl	8001324 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e040      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	049b      	lsls	r3, r3, #18
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x588>
 8002bfe:	e038      	b.n	8002c72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e033      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x624>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2203      	movs	r2, #3
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d126      	bne.n	8002c6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2270      	movs	r2, #112	; 0x70
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d11f      	bne.n	8002c6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	23fe      	movs	r3, #254	; 0xfe
 8002c32:	01db      	lsls	r3, r3, #7
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d116      	bne.n	8002c6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	23f8      	movs	r3, #248	; 0xf8
 8002c44:	039b      	lsls	r3, r3, #14
 8002c46:	401a      	ands	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10e      	bne.n	8002c6e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	23e0      	movs	r3, #224	; 0xe0
 8002c54:	051b      	lsls	r3, r3, #20
 8002c56:	401a      	ands	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0f5b      	lsrs	r3, r3, #29
 8002c64:	075a      	lsls	r2, r3, #29
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b008      	add	sp, #32
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	00001388 	.word	0x00001388
 8002c88:	efffffff 	.word	0xefffffff
 8002c8c:	feffffff 	.word	0xfeffffff
 8002c90:	11c1808c 	.word	0x11c1808c
 8002c94:	eefeffff 	.word	0xeefeffff

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0e9      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d91e      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fb2a 	bl	8001324 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cd4:	e009      	b.n	8002cea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd6:	f7fe fb25 	bl	8001324 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_RCC_ClockConfig+0x1f4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0ca      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d015      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d006      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d0c:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	21e0      	movs	r1, #224	; 0xe0
 8002d14:	01c9      	lsls	r1, r1, #7
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_RCC_ClockConfig+0x1fc>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	d057      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	029b      	lsls	r3, r3, #10
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d12b      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e097      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	049b      	lsls	r3, r3, #18
 8002d60:	4013      	ands	r3, r2
 8002d62:	d11f      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e08b      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d70:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e07f      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e074      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e06d      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2207      	movs	r2, #7
 8002daa:	4393      	bics	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe fab4 	bl	8001324 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	e009      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7fe faaf 	bl	8001324 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <HAL_RCC_ClockConfig+0x1f4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e054      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2238      	movs	r2, #56	; 0x38
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1ec      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2207      	movs	r2, #7
 8002dee:	4013      	ands	r3, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d21e      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fa8c 	bl	8001324 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e10:	e009      	b.n	8002e26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe fa87 	bl	8001324 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_RCC_ClockConfig+0x1f4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e02c      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <HAL_RCC_ClockConfig+0x1f0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_RCC_ClockConfig+0x200>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e52:	f000 f829 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e56:	0001      	movs	r1, r0
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	220f      	movs	r2, #15
 8002e60:	401a      	ands	r2, r3
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x204>)
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	58d3      	ldr	r3, [r2, r3]
 8002e68:	221f      	movs	r2, #31
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	000a      	movs	r2, r1
 8002e6e:	40da      	lsrs	r2, r3
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x208>)
 8002e72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x20c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fe f9f7 	bl	800126c <HAL_InitTick>
 8002e7e:	0003      	movs	r3, r0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	00001388 	.word	0x00001388
 8002e90:	40021000 	.word	0x40021000
 8002e94:	fffff0ff 	.word	0xfffff0ff
 8002e98:	ffff8fff 	.word	0xffff8fff
 8002e9c:	080039f4 	.word	0x080039f4
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2238      	movs	r2, #56	; 0x38
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0adb      	lsrs	r3, r3, #11
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	4835      	ldr	r0, [pc, #212]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ece:	f7fd f919 	bl	8000104 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e05d      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2238      	movs	r2, #56	; 0x38
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d102      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e054      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2238      	movs	r2, #56	; 0x38
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d138      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2203      	movs	r2, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	2207      	movs	r2, #7
 8002f08:	4013      	ands	r3, r2
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d10d      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4824      	ldr	r0, [pc, #144]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f18:	f7fd f8f4 	bl	8000104 <__udivsi3>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	0019      	movs	r1, r3
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	227f      	movs	r2, #127	; 0x7f
 8002f28:	4013      	ands	r3, r2
 8002f2a:	434b      	muls	r3, r1
 8002f2c:	617b      	str	r3, [r7, #20]
        break;
 8002f2e:	e00d      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	481c      	ldr	r0, [pc, #112]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f34:	f7fd f8e6 	bl	8000104 <__udivsi3>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	227f      	movs	r2, #127	; 0x7f
 8002f44:	4013      	ands	r3, r2
 8002f46:	434b      	muls	r3, r1
 8002f48:	617b      	str	r3, [r7, #20]
        break;
 8002f4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0f5b      	lsrs	r3, r3, #29
 8002f52:	2207      	movs	r2, #7
 8002f54:	4013      	ands	r3, r2
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f7fd f8d1 	bl	8000104 <__udivsi3>
 8002f62:	0003      	movs	r3, r0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e015      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2238      	movs	r2, #56	; 0x38
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d103      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2238      	movs	r2, #56	; 0x38
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	d103      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f88:	23fa      	movs	r3, #250	; 0xfa
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e001      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f94:	693b      	ldr	r3, [r7, #16]
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b006      	add	sp, #24
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fc4:	f7ff fff2 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fc8:	0004      	movs	r4, r0
 8002fca:	f7ff fb39 	bl	8002640 <LL_RCC_GetAPB1Prescaler>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	0b1a      	lsrs	r2, r3, #12
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	58d3      	ldr	r3, [r2, r3]
 8002fd8:	221f      	movs	r2, #31
 8002fda:	4013      	ands	r3, r2
 8002fdc:	40dc      	lsrs	r4, r3
 8002fde:	0023      	movs	r3, r4
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	08003a34 	.word	0x08003a34

08002fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2284      	movs	r2, #132	; 0x84
 8003002:	589b      	ldr	r3, [r3, r2]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe f896 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2284      	movs	r2, #132	; 0x84
 800301c:	2124      	movs	r1, #36	; 0x24
 800301e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f830 	bl	8003098 <UART_SetConfig>
 8003038:	0003      	movs	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e024      	b.n	800308c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 fab3 	bl	80035b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	490d      	ldr	r1, [pc, #52]	; (8003094 <HAL_UART_Init+0xa8>)
 800305e:	400a      	ands	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	212a      	movs	r1, #42	; 0x2a
 800306e:	438a      	bics	r2, r1
 8003070:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fb4b 	bl	8003720 <UART_CheckIdleState>
 800308a:	0003      	movs	r3, r0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	ffffb7ff 	.word	0xffffb7ff

08003098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b090      	sub	sp, #64	; 0x40
 800309c:	af00      	add	r7, sp, #0
 800309e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a0:	231a      	movs	r3, #26
 80030a2:	2220      	movs	r2, #32
 80030a4:	4694      	mov	ip, r2
 80030a6:	44bc      	add	ip, r7
 80030a8:	4463      	add	r3, ip
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4ac7      	ldr	r2, [pc, #796]	; (80033ec <UART_SetConfig+0x354>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d8:	430b      	orrs	r3, r1
 80030da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4ac3      	ldr	r2, [pc, #780]	; (80033f0 <UART_SetConfig+0x358>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0018      	movs	r0, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	68d9      	ldr	r1, [r3, #12]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	0003      	movs	r3, r0
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4abc      	ldr	r2, [pc, #752]	; (80033f4 <UART_SetConfig+0x35c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800310c:	4313      	orrs	r3, r2
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4ab8      	ldr	r2, [pc, #736]	; (80033f8 <UART_SetConfig+0x360>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	430b      	orrs	r3, r1
 8003124:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	220f      	movs	r2, #15
 800312e:	4393      	bics	r3, r2
 8003130:	0018      	movs	r0, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	0003      	movs	r3, r0
 800313c:	430b      	orrs	r3, r1
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4aad      	ldr	r2, [pc, #692]	; (80033fc <UART_SetConfig+0x364>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d136      	bne.n	80031b8 <UART_SetConfig+0x120>
 800314a:	4bad      	ldr	r3, [pc, #692]	; (8003400 <UART_SetConfig+0x368>)
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	2203      	movs	r2, #3
 8003150:	4013      	ands	r3, r2
 8003152:	2b03      	cmp	r3, #3
 8003154:	d020      	beq.n	8003198 <UART_SetConfig+0x100>
 8003156:	d827      	bhi.n	80031a8 <UART_SetConfig+0x110>
 8003158:	2b02      	cmp	r3, #2
 800315a:	d00d      	beq.n	8003178 <UART_SetConfig+0xe0>
 800315c:	d824      	bhi.n	80031a8 <UART_SetConfig+0x110>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0xd0>
 8003162:	2b01      	cmp	r3, #1
 8003164:	d010      	beq.n	8003188 <UART_SetConfig+0xf0>
 8003166:	e01f      	b.n	80031a8 <UART_SetConfig+0x110>
 8003168:	231b      	movs	r3, #27
 800316a:	2220      	movs	r2, #32
 800316c:	4694      	mov	ip, r2
 800316e:	44bc      	add	ip, r7
 8003170:	4463      	add	r3, ip
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e07c      	b.n	8003272 <UART_SetConfig+0x1da>
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	4694      	mov	ip, r2
 800317e:	44bc      	add	ip, r7
 8003180:	4463      	add	r3, ip
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e074      	b.n	8003272 <UART_SetConfig+0x1da>
 8003188:	231b      	movs	r3, #27
 800318a:	2220      	movs	r2, #32
 800318c:	4694      	mov	ip, r2
 800318e:	44bc      	add	ip, r7
 8003190:	4463      	add	r3, ip
 8003192:	2204      	movs	r2, #4
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e06c      	b.n	8003272 <UART_SetConfig+0x1da>
 8003198:	231b      	movs	r3, #27
 800319a:	2220      	movs	r2, #32
 800319c:	4694      	mov	ip, r2
 800319e:	44bc      	add	ip, r7
 80031a0:	4463      	add	r3, ip
 80031a2:	2208      	movs	r2, #8
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e064      	b.n	8003272 <UART_SetConfig+0x1da>
 80031a8:	231b      	movs	r3, #27
 80031aa:	2220      	movs	r2, #32
 80031ac:	4694      	mov	ip, r2
 80031ae:	44bc      	add	ip, r7
 80031b0:	4463      	add	r3, ip
 80031b2:	2210      	movs	r2, #16
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e05c      	b.n	8003272 <UART_SetConfig+0x1da>
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a91      	ldr	r2, [pc, #580]	; (8003404 <UART_SetConfig+0x36c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d107      	bne.n	80031d2 <UART_SetConfig+0x13a>
 80031c2:	231b      	movs	r3, #27
 80031c4:	2220      	movs	r2, #32
 80031c6:	4694      	mov	ip, r2
 80031c8:	44bc      	add	ip, r7
 80031ca:	4463      	add	r3, ip
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e04f      	b.n	8003272 <UART_SetConfig+0x1da>
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <UART_SetConfig+0x35c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d143      	bne.n	8003264 <UART_SetConfig+0x1cc>
 80031dc:	4b88      	ldr	r3, [pc, #544]	; (8003400 <UART_SetConfig+0x368>)
 80031de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031e0:	23c0      	movs	r3, #192	; 0xc0
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	4013      	ands	r3, r2
 80031e6:	22c0      	movs	r2, #192	; 0xc0
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02a      	beq.n	8003244 <UART_SetConfig+0x1ac>
 80031ee:	22c0      	movs	r2, #192	; 0xc0
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d82e      	bhi.n	8003254 <UART_SetConfig+0x1bc>
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d012      	beq.n	8003224 <UART_SetConfig+0x18c>
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	4293      	cmp	r3, r2
 8003204:	d826      	bhi.n	8003254 <UART_SetConfig+0x1bc>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <UART_SetConfig+0x17c>
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	4293      	cmp	r3, r2
 8003210:	d010      	beq.n	8003234 <UART_SetConfig+0x19c>
 8003212:	e01f      	b.n	8003254 <UART_SetConfig+0x1bc>
 8003214:	231b      	movs	r3, #27
 8003216:	2220      	movs	r2, #32
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e026      	b.n	8003272 <UART_SetConfig+0x1da>
 8003224:	231b      	movs	r3, #27
 8003226:	2220      	movs	r2, #32
 8003228:	4694      	mov	ip, r2
 800322a:	44bc      	add	ip, r7
 800322c:	4463      	add	r3, ip
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e01e      	b.n	8003272 <UART_SetConfig+0x1da>
 8003234:	231b      	movs	r3, #27
 8003236:	2220      	movs	r2, #32
 8003238:	4694      	mov	ip, r2
 800323a:	44bc      	add	ip, r7
 800323c:	4463      	add	r3, ip
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e016      	b.n	8003272 <UART_SetConfig+0x1da>
 8003244:	231b      	movs	r3, #27
 8003246:	2220      	movs	r2, #32
 8003248:	4694      	mov	ip, r2
 800324a:	44bc      	add	ip, r7
 800324c:	4463      	add	r3, ip
 800324e:	2208      	movs	r2, #8
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e00e      	b.n	8003272 <UART_SetConfig+0x1da>
 8003254:	231b      	movs	r3, #27
 8003256:	2220      	movs	r2, #32
 8003258:	4694      	mov	ip, r2
 800325a:	44bc      	add	ip, r7
 800325c:	4463      	add	r3, ip
 800325e:	2210      	movs	r2, #16
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e006      	b.n	8003272 <UART_SetConfig+0x1da>
 8003264:	231b      	movs	r3, #27
 8003266:	2220      	movs	r2, #32
 8003268:	4694      	mov	ip, r2
 800326a:	44bc      	add	ip, r7
 800326c:	4463      	add	r3, ip
 800326e:	2210      	movs	r2, #16
 8003270:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UART_SetConfig+0x35c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d000      	beq.n	800327e <UART_SetConfig+0x1e6>
 800327c:	e096      	b.n	80033ac <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327e:	231b      	movs	r3, #27
 8003280:	2220      	movs	r2, #32
 8003282:	4694      	mov	ip, r2
 8003284:	44bc      	add	ip, r7
 8003286:	4463      	add	r3, ip
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d015      	beq.n	80032ba <UART_SetConfig+0x222>
 800328e:	dc18      	bgt.n	80032c2 <UART_SetConfig+0x22a>
 8003290:	2b04      	cmp	r3, #4
 8003292:	d00d      	beq.n	80032b0 <UART_SetConfig+0x218>
 8003294:	dc15      	bgt.n	80032c2 <UART_SetConfig+0x22a>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <UART_SetConfig+0x208>
 800329a:	2b02      	cmp	r3, #2
 800329c:	d005      	beq.n	80032aa <UART_SetConfig+0x212>
 800329e:	e010      	b.n	80032c2 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff fe8e 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 80032a4:	0003      	movs	r3, r0
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032a8:	e015      	b.n	80032d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032aa:	4b57      	ldr	r3, [pc, #348]	; (8003408 <UART_SetConfig+0x370>)
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032ae:	e012      	b.n	80032d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b0:	f7ff fdfa 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80032b4:	0003      	movs	r3, r0
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032c6:	231a      	movs	r3, #26
 80032c8:	2220      	movs	r2, #32
 80032ca:	4694      	mov	ip, r2
 80032cc:	44bc      	add	ip, r7
 80032ce:	4463      	add	r3, ip
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
        break;
 80032d4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d100      	bne.n	80032de <UART_SetConfig+0x246>
 80032dc:	e14f      	b.n	800357e <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <UART_SetConfig+0x374>)
 80032e4:	0052      	lsls	r2, r2, #1
 80032e6:	5ad3      	ldrh	r3, [r2, r3]
 80032e8:	0019      	movs	r1, r3
 80032ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ec:	f7fc ff0a 	bl	8000104 <__udivsi3>
 80032f0:	0003      	movs	r3, r0
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	0013      	movs	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003300:	429a      	cmp	r2, r3
 8003302:	d305      	bcc.n	8003310 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800330a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d907      	bls.n	8003320 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8003310:	231a      	movs	r3, #26
 8003312:	2220      	movs	r2, #32
 8003314:	4694      	mov	ip, r2
 8003316:	44bc      	add	ip, r7
 8003318:	4463      	add	r3, ip
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e12e      	b.n	800357e <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <UART_SetConfig+0x374>)
 800332e:	0052      	lsls	r2, r2, #1
 8003330:	5ad3      	ldrh	r3, [r2, r3]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	69b8      	ldr	r0, [r7, #24]
 800333e:	69f9      	ldr	r1, [r7, #28]
 8003340:	f7fc ff6c 	bl	800021c <__aeabi_uldivmod>
 8003344:	0002      	movs	r2, r0
 8003346:	000b      	movs	r3, r1
 8003348:	0e11      	lsrs	r1, r2, #24
 800334a:	021d      	lsls	r5, r3, #8
 800334c:	430d      	orrs	r5, r1
 800334e:	0214      	lsls	r4, r2, #8
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68b8      	ldr	r0, [r7, #8]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	1900      	adds	r0, r0, r4
 8003362:	4169      	adcs	r1, r5
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f7fc ff53 	bl	800021c <__aeabi_uldivmod>
 8003376:	0002      	movs	r2, r0
 8003378:	000b      	movs	r3, r1
 800337a:	0013      	movs	r3, r2
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800337e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d309      	bcc.n	800339c <UART_SetConfig+0x304>
 8003388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	035b      	lsls	r3, r3, #13
 800338e:	429a      	cmp	r2, r3
 8003390:	d204      	bcs.n	800339c <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e0f0      	b.n	800357e <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 800339c:	231a      	movs	r3, #26
 800339e:	2220      	movs	r2, #32
 80033a0:	4694      	mov	ip, r2
 80033a2:	44bc      	add	ip, r7
 80033a4:	4463      	add	r3, ip
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e0e8      	b.n	800357e <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d000      	beq.n	80033ba <UART_SetConfig+0x322>
 80033b8:	e086      	b.n	80034c8 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 80033ba:	231b      	movs	r3, #27
 80033bc:	2220      	movs	r2, #32
 80033be:	4694      	mov	ip, r2
 80033c0:	44bc      	add	ip, r7
 80033c2:	4463      	add	r3, ip
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d027      	beq.n	800341a <UART_SetConfig+0x382>
 80033ca:	dc2a      	bgt.n	8003422 <UART_SetConfig+0x38a>
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d01f      	beq.n	8003410 <UART_SetConfig+0x378>
 80033d0:	dc27      	bgt.n	8003422 <UART_SetConfig+0x38a>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <UART_SetConfig+0x344>
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d005      	beq.n	80033e6 <UART_SetConfig+0x34e>
 80033da:	e022      	b.n	8003422 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7ff fdf0 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 80033e0:	0003      	movs	r3, r0
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e4:	e027      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <UART_SetConfig+0x370>)
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ea:	e024      	b.n	8003436 <UART_SetConfig+0x39e>
 80033ec:	cfff69f3 	.word	0xcfff69f3
 80033f0:	ffffcfff 	.word	0xffffcfff
 80033f4:	40008000 	.word	0x40008000
 80033f8:	11fff4ff 	.word	0x11fff4ff
 80033fc:	40013800 	.word	0x40013800
 8003400:	40021000 	.word	0x40021000
 8003404:	40004400 	.word	0x40004400
 8003408:	00f42400 	.word	0x00f42400
 800340c:	08003a54 	.word	0x08003a54
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003410:	f7ff fd4a 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8003414:	0003      	movs	r3, r0
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003418:	e00d      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003420:	e009      	b.n	8003436 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003426:	231a      	movs	r3, #26
 8003428:	2220      	movs	r2, #32
 800342a:	4694      	mov	ip, r2
 800342c:	44bc      	add	ip, r7
 800342e:	4463      	add	r3, ip
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
        break;
 8003434:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d100      	bne.n	800343e <UART_SetConfig+0x3a6>
 800343c:	e09f      	b.n	800357e <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <UART_SetConfig+0x518>)
 8003444:	0052      	lsls	r2, r2, #1
 8003446:	5ad3      	ldrh	r3, [r2, r3]
 8003448:	0019      	movs	r1, r3
 800344a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800344c:	f7fc fe5a 	bl	8000104 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	005a      	lsls	r2, r3, #1
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	18d2      	adds	r2, r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f7fc fe4e 	bl	8000104 <__udivsi3>
 8003468:	0003      	movs	r3, r0
 800346a:	b29b      	uxth	r3, r3
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d921      	bls.n	80034b8 <UART_SetConfig+0x420>
 8003474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	025b      	lsls	r3, r3, #9
 800347a:	429a      	cmp	r2, r3
 800347c:	d21c      	bcs.n	80034b8 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	b29a      	uxth	r2, r3
 8003482:	200e      	movs	r0, #14
 8003484:	2420      	movs	r4, #32
 8003486:	193b      	adds	r3, r7, r4
 8003488:	181b      	adds	r3, r3, r0
 800348a:	210f      	movs	r1, #15
 800348c:	438a      	bics	r2, r1
 800348e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	b29b      	uxth	r3, r3
 8003496:	2207      	movs	r2, #7
 8003498:	4013      	ands	r3, r2
 800349a:	b299      	uxth	r1, r3
 800349c:	193b      	adds	r3, r7, r4
 800349e:	181b      	adds	r3, r3, r0
 80034a0:	193a      	adds	r2, r7, r4
 80034a2:	1812      	adds	r2, r2, r0
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	193a      	adds	r2, r7, r4
 80034b0:	1812      	adds	r2, r2, r0
 80034b2:	8812      	ldrh	r2, [r2, #0]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e062      	b.n	800357e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80034b8:	231a      	movs	r3, #26
 80034ba:	2220      	movs	r2, #32
 80034bc:	4694      	mov	ip, r2
 80034be:	44bc      	add	ip, r7
 80034c0:	4463      	add	r3, ip
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e05a      	b.n	800357e <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034c8:	231b      	movs	r3, #27
 80034ca:	2220      	movs	r2, #32
 80034cc:	4694      	mov	ip, r2
 80034ce:	44bc      	add	ip, r7
 80034d0:	4463      	add	r3, ip
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d015      	beq.n	8003504 <UART_SetConfig+0x46c>
 80034d8:	dc18      	bgt.n	800350c <UART_SetConfig+0x474>
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d00d      	beq.n	80034fa <UART_SetConfig+0x462>
 80034de:	dc15      	bgt.n	800350c <UART_SetConfig+0x474>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <UART_SetConfig+0x452>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d005      	beq.n	80034f4 <UART_SetConfig+0x45c>
 80034e8:	e010      	b.n	800350c <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff fd69 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 80034ee:	0003      	movs	r3, r0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034f2:	e015      	b.n	8003520 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <UART_SetConfig+0x51c>)
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034f8:	e012      	b.n	8003520 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fa:	f7ff fcd5 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80034fe:	0003      	movs	r3, r0
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003502:	e00d      	b.n	8003520 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800350a:	e009      	b.n	8003520 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003510:	231a      	movs	r3, #26
 8003512:	2220      	movs	r2, #32
 8003514:	4694      	mov	ip, r2
 8003516:	44bc      	add	ip, r7
 8003518:	4463      	add	r3, ip
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
        break;
 800351e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02b      	beq.n	800357e <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <UART_SetConfig+0x518>)
 800352c:	0052      	lsls	r2, r2, #1
 800352e:	5ad3      	ldrh	r3, [r2, r3]
 8003530:	0019      	movs	r1, r3
 8003532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003534:	f7fc fde6 	bl	8000104 <__udivsi3>
 8003538:	0003      	movs	r3, r0
 800353a:	001a      	movs	r2, r3
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	18d2      	adds	r2, r2, r3
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0019      	movs	r1, r3
 800354a:	0010      	movs	r0, r2
 800354c:	f7fc fdda 	bl	8000104 <__udivsi3>
 8003550:	0003      	movs	r3, r0
 8003552:	b29b      	uxth	r3, r3
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d909      	bls.n	8003570 <UART_SetConfig+0x4d8>
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	025b      	lsls	r3, r3, #9
 8003562:	429a      	cmp	r2, r3
 8003564:	d204      	bcs.n	8003570 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e006      	b.n	800357e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003570:	231a      	movs	r3, #26
 8003572:	2220      	movs	r2, #32
 8003574:	4694      	mov	ip, r2
 8003576:	44bc      	add	ip, r7
 8003578:	4463      	add	r3, ip
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	226a      	movs	r2, #106	; 0x6a
 8003582:	2101      	movs	r1, #1
 8003584:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	2268      	movs	r2, #104	; 0x68
 800358a:	2101      	movs	r1, #1
 800358c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	2200      	movs	r2, #0
 8003598:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800359a:	231a      	movs	r3, #26
 800359c:	2220      	movs	r2, #32
 800359e:	4694      	mov	ip, r2
 80035a0:	44bc      	add	ip, r7
 80035a2:	4463      	add	r3, ip
 80035a4:	781b      	ldrb	r3, [r3, #0]
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b010      	add	sp, #64	; 0x40
 80035ac:	bdb0      	pop	{r4, r5, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	08003a54 	.word	0x08003a54
 80035b4:	00f42400 	.word	0x00f42400

080035b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	2201      	movs	r2, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <UART_AdvFeatureConfig+0x144>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	d00b      	beq.n	8003604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a43      	ldr	r2, [pc, #268]	; (8003700 <UART_AdvFeatureConfig+0x148>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2204      	movs	r2, #4
 800360a:	4013      	ands	r3, r2
 800360c:	d00b      	beq.n	8003626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <UART_AdvFeatureConfig+0x14c>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	2208      	movs	r2, #8
 800362c:	4013      	ands	r3, r2
 800362e:	d00b      	beq.n	8003648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a34      	ldr	r2, [pc, #208]	; (8003708 <UART_AdvFeatureConfig+0x150>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d00b      	beq.n	800366a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <UART_AdvFeatureConfig+0x154>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	2220      	movs	r2, #32
 8003670:	4013      	ands	r3, r2
 8003672:	d00b      	beq.n	800368c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4a25      	ldr	r2, [pc, #148]	; (8003710 <UART_AdvFeatureConfig+0x158>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	4013      	ands	r3, r2
 8003694:	d01d      	beq.n	80036d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <UART_AdvFeatureConfig+0x15c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	035b      	lsls	r3, r3, #13
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10b      	bne.n	80036d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <UART_AdvFeatureConfig+0x160>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	4013      	ands	r3, r2
 80036da:	d00b      	beq.n	80036f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <UART_AdvFeatureConfig+0x164>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fffdffff 	.word	0xfffdffff
 8003700:	fffeffff 	.word	0xfffeffff
 8003704:	fffbffff 	.word	0xfffbffff
 8003708:	ffff7fff 	.word	0xffff7fff
 800370c:	ffffefff 	.word	0xffffefff
 8003710:	ffffdfff 	.word	0xffffdfff
 8003714:	ffefffff 	.word	0xffefffff
 8003718:	ff9fffff 	.word	0xff9fffff
 800371c:	fff7ffff 	.word	0xfff7ffff

08003720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	228c      	movs	r2, #140	; 0x8c
 800372c:	2100      	movs	r1, #0
 800372e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003730:	f7fd fdf8 	bl	8001324 <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2208      	movs	r2, #8
 8003740:	4013      	ands	r3, r2
 8003742:	2b08      	cmp	r3, #8
 8003744:	d10c      	bne.n	8003760 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	0391      	lsls	r1, r2, #14
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <UART_CheckIdleState+0x90>)
 8003750:	9200      	str	r2, [sp, #0]
 8003752:	2200      	movs	r2, #0
 8003754:	f000 f82e 	bl	80037b4 <UART_WaitOnFlagUntilTimeout>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e023      	b.n	80037a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2204      	movs	r2, #4
 8003768:	4013      	ands	r3, r2
 800376a:	2b04      	cmp	r3, #4
 800376c:	d10c      	bne.n	8003788 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	03d1      	lsls	r1, r2, #15
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <UART_CheckIdleState+0x90>)
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	f000 f81a 	bl	80037b4 <UART_WaitOnFlagUntilTimeout>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e00f      	b.n	80037a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2284      	movs	r2, #132	; 0x84
 800378c:	2120      	movs	r1, #32
 800378e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2288      	movs	r2, #136	; 0x88
 8003794:	2120      	movs	r1, #32
 8003796:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	01ffffff 	.word	0x01ffffff

080037b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b094      	sub	sp, #80	; 0x50
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c4:	e0a7      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c8:	3301      	adds	r3, #1
 80037ca:	d100      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80037cc:	e0a3      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fd fda9 	bl	8001324 <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13f      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
 80037ee:	2301      	movs	r3, #1
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	494e      	ldr	r1, [pc, #312]	; (8003940 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003816:	f3ef 8310 	mrs	r3, PRIMASK
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	643b      	str	r3, [r7, #64]	; 0x40
 8003820:	2301      	movs	r3, #1
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2284      	movs	r2, #132	; 0x84
 800384c:	2120      	movs	r1, #32
 800384e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2288      	movs	r2, #136	; 0x88
 8003854:	2120      	movs	r1, #32
 8003856:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e069      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d052      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	401a      	ands	r2, r3
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	429a      	cmp	r2, r3
 8003882:	d148      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388e:	f3ef 8310 	mrs	r3, PRIMASK
 8003892:	613b      	str	r3, [r7, #16]
  return(result);
 8003894:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f383 8810 	msr	PRIMASK, r3
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4924      	ldr	r1, [pc, #144]	; (8003940 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c0:	f3ef 8310 	mrs	r3, PRIMASK
 80038c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80038c6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ca:	2301      	movs	r3, #1
 80038cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f383 8810 	msr	PRIMASK, r3
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	438a      	bics	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2284      	movs	r2, #132	; 0x84
 80038f6:	2120      	movs	r1, #32
 80038f8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2288      	movs	r2, #136	; 0x88
 80038fe:	2120      	movs	r1, #32
 8003900:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	228c      	movs	r2, #140	; 0x8c
 8003906:	2120      	movs	r1, #32
 8003908:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e010      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	425a      	negs	r2, r3
 8003926:	4153      	adcs	r3, r2
 8003928:	b2db      	uxtb	r3, r3
 800392a:	001a      	movs	r2, r3
 800392c:	1dfb      	adds	r3, r7, #7
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d100      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x182>
 8003934:	e747      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b014      	add	sp, #80	; 0x50
 800393e:	bd80      	pop	{r7, pc}
 8003940:	fffffe5f 	.word	0xfffffe5f

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	2600      	movs	r6, #0
 8003948:	4d0c      	ldr	r5, [pc, #48]	; (800397c <__libc_init_array+0x38>)
 800394a:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	2600      	movs	r6, #0
 8003956:	f000 f821 	bl	800399c <_init>
 800395a:	4d0a      	ldr	r5, [pc, #40]	; (8003984 <__libc_init_array+0x40>)
 800395c:	4c0a      	ldr	r4, [pc, #40]	; (8003988 <__libc_init_array+0x44>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	00b3      	lsls	r3, r6, #2
 800396a:	58eb      	ldr	r3, [r5, r3]
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	00b3      	lsls	r3, r6, #2
 8003974:	58eb      	ldr	r3, [r5, r3]
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	08003a74 	.word	0x08003a74
 8003980:	08003a74 	.word	0x08003a74
 8003984:	08003a74 	.word	0x08003a74
 8003988:	08003a78 	.word	0x08003a78

0800398c <memset>:
 800398c:	0003      	movs	r3, r0
 800398e:	1882      	adds	r2, r0, r2
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	7019      	strb	r1, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
